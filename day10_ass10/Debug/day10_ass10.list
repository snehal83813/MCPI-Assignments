
day10_ass10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800175c  0800175c  0000275c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001800  08001800  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  08001800  08001800  00002800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001808  08001808  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001808  08001808  00002808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800180c  0800180c  0000280c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001810  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001fe9  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000977  00000000  00000000  00005067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  000059e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000148  00000000  00000000  00005bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001956e  00000000  00000000  00005d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000269f  00000000  00000000  0001f276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c080  00000000  00000000  00021915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ad995  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a98  00000000  00000000  000ad9d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000ae470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000060  00000000  00000000  000ae48f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001744 	.word	0x08001744

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001744 	.word	0x08001744

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000278:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <DelayMs+0x44>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800027e:	4b0e      	ldr	r3, [pc, #56]	@ (80002b8 <DelayMs+0x48>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a0e      	ldr	r2, [pc, #56]	@ (80002bc <DelayMs+0x4c>)
 8000284:	fba2 2303 	umull	r2, r3, r2, r3
 8000288:	099b      	lsrs	r3, r3, #6
 800028a:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	fb02 f303 	mul.w	r3, r2, r3
 8000294:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000296:	bf00      	nop
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <DelayMs+0x44>)
 800029a:	685a      	ldr	r2, [r3, #4]
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	1ad2      	subs	r2, r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f8      	bcc.n	8000298 <DelayMs+0x28>
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e0001000 	.word	0xe0001000
 80002b8:	20000000 	.word	0x20000000
 80002bc:	10624dd3 	.word	0x10624dd3

080002c0 <I2CStart>:
 */


#include "i2c.h"

void I2CStart() {
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 80002c4:	4b08      	ldr	r3, [pc, #32]	@ (80002e8 <I2CStart+0x28>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a07      	ldr	r2, [pc, #28]	@ (80002e8 <I2CStart+0x28>)
 80002ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002ce:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 80002d0:	bf00      	nop
 80002d2:	4b05      	ldr	r3, [pc, #20]	@ (80002e8 <I2CStart+0x28>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f003 0301 	and.w	r3, r3, #1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d0f9      	beq.n	80002d2 <I2CStart+0x12>
}
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr
 80002e8:	40005400 	.word	0x40005400

080002ec <I2CStop>:

void I2CRepeatStart() {
	I2CStart();
}

void I2CStop() {
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 80002f0:	4b08      	ldr	r3, [pc, #32]	@ (8000314 <I2CStop+0x28>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a07      	ldr	r2, [pc, #28]	@ (8000314 <I2CStop+0x28>)
 80002f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002fa:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 80002fc:	bf00      	nop
 80002fe:	4b05      	ldr	r3, [pc, #20]	@ (8000314 <I2CStop+0x28>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	f003 0302 	and.w	r3, r3, #2
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0f9      	beq.n	80002fe <I2CStop+0x12>
}
 800030a:	bf00      	nop
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	40005400 	.word	0x40005400

08000318 <I2CSendSlaveAddress>:

void I2CSendSlaveAddress(uint8_t slaveaddr) {
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr
    // wait until address is sent
    I2C1->DR = slaveaddr;
 8000322:	4a09      	ldr	r2, [pc, #36]	@ (8000348 <I2CSendSlaveAddress+0x30>)
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000328:	bf00      	nop
 800032a:	4b07      	ldr	r3, [pc, #28]	@ (8000348 <I2CSendSlaveAddress+0x30>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f003 0302 	and.w	r3, r3, #2
 8000332:	2b00      	cmp	r3, #0
 8000334:	d0f9      	beq.n	800032a <I2CSendSlaveAddress+0x12>
    // dummy read to clear flags
    (void)I2C1->SR1;
 8000336:	4b04      	ldr	r3, [pc, #16]	@ (8000348 <I2CSendSlaveAddress+0x30>)
 8000338:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2; // clear addr condition
 800033a:	4b03      	ldr	r3, [pc, #12]	@ (8000348 <I2CSendSlaveAddress+0x30>)
 800033c:	699b      	ldr	r3, [r3, #24]
}
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	40005400 	.word	0x40005400

0800034c <I2CSendData>:

void I2CSendData(uint8_t val) {
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]
    // send data in write mode
    // wait until address is sent
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000356:	bf00      	nop
 8000358:	4b0a      	ldr	r3, [pc, #40]	@ (8000384 <I2CSendData+0x38>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0f9      	beq.n	8000358 <I2CSendData+0xc>
    // write dr and clear flags
    I2C1->DR = val;
 8000364:	4a07      	ldr	r2, [pc, #28]	@ (8000384 <I2CSendData+0x38>)
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	6113      	str	r3, [r2, #16]
    // wait until data byte is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 800036a:	bf00      	nop
 800036c:	4b05      	ldr	r3, [pc, #20]	@ (8000384 <I2CSendData+0x38>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	f003 0304 	and.w	r3, r3, #4
 8000374:	2b00      	cmp	r3, #0
 8000376:	d0f9      	beq.n	800036c <I2CSendData+0x20>
}
 8000378:	bf00      	nop
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	40005400 	.word	0x40005400

08000388 <I2CIsDeviceReady>:
	// read content and clear flags
	val = I2C1->DR;
	return val;
}

int I2CIsDeviceReady(uint8_t slaveaddr) {
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr of write
	slaveaddr &= ~BV(0);
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	f023 0301 	bic.w	r3, r3, #1
 8000398:	71fb      	strb	r3, [r7, #7]
    // wait until address is sent
    I2C1->DR = slaveaddr;
 800039a:	4a09      	ldr	r2, [pc, #36]	@ (80003c0 <I2CIsDeviceReady+0x38>)
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80003a0:	bf00      	nop
 80003a2:	4b07      	ldr	r3, [pc, #28]	@ (80003c0 <I2CIsDeviceReady+0x38>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f003 0302 	and.w	r3, r3, #2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d0f9      	beq.n	80003a2 <I2CIsDeviceReady+0x1a>
    // dummy read to clear flags
    (void)I2C1->SR2; // clear addr condition
 80003ae:	4b04      	ldr	r3, [pc, #16]	@ (80003c0 <I2CIsDeviceReady+0x38>)
 80003b0:	699b      	ldr	r3, [r3, #24]
	return 1;
 80003b2:	2301      	movs	r3, #1
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40005400 	.word	0x40005400

080003c4 <I2CInit>:

void I2CInit() {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
    // enable GPIOB clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80003c8:	4b43      	ldr	r3, [pc, #268]	@ (80004d8 <I2CInit+0x114>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003cc:	4a42      	ldr	r2, [pc, #264]	@ (80004d8 <I2CInit+0x114>)
 80003ce:	f043 0302 	orr.w	r3, r3, #2
 80003d2:	6313      	str	r3, [r2, #48]	@ 0x30
	DelayMs(50);
 80003d4:	2032      	movs	r0, #50	@ 0x32
 80003d6:	f7ff ff4b 	bl	8000270 <DelayMs>

    // setup I2C pins
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80003da:	4b3f      	ldr	r3, [pc, #252]	@ (80004d8 <I2CInit+0x114>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003de:	4a3e      	ldr	r2, [pc, #248]	@ (80004d8 <I2CInit+0x114>)
 80003e0:	f043 0302 	orr.w	r3, r3, #2
 80003e4:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~(3U << I2C1_SCL*2); // PB6
 80003e6:	4b3d      	ldr	r3, [pc, #244]	@ (80004dc <I2CInit+0x118>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a3c      	ldr	r2, [pc, #240]	@ (80004dc <I2CInit+0x118>)
 80003ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80003f0:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SCL*2); // AF
 80003f2:	4b3a      	ldr	r3, [pc, #232]	@ (80004dc <I2CInit+0x118>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a39      	ldr	r2, [pc, #228]	@ (80004dc <I2CInit+0x118>)
 80003f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003fc:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SCL);   // open-drain
 80003fe:	4b37      	ldr	r3, [pc, #220]	@ (80004dc <I2CInit+0x118>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	4a36      	ldr	r2, [pc, #216]	@ (80004dc <I2CInit+0x118>)
 8000404:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000408:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SCL*2); // no pull-up/down
 800040a:	4b34      	ldr	r3, [pc, #208]	@ (80004dc <I2CInit+0x118>)
 800040c:	68db      	ldr	r3, [r3, #12]
 800040e:	4a33      	ldr	r2, [pc, #204]	@ (80004dc <I2CInit+0x118>)
 8000410:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000414:	60d3      	str	r3, [r2, #12]
    GPIOB->MODER &= ~(3U << I2C1_SDA*2); // PB7
 8000416:	4b31      	ldr	r3, [pc, #196]	@ (80004dc <I2CInit+0x118>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a30      	ldr	r2, [pc, #192]	@ (80004dc <I2CInit+0x118>)
 800041c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000420:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SDA*2); // AF
 8000422:	4b2e      	ldr	r3, [pc, #184]	@ (80004dc <I2CInit+0x118>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a2d      	ldr	r2, [pc, #180]	@ (80004dc <I2CInit+0x118>)
 8000428:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800042c:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SDA);   // open-drain
 800042e:	4b2b      	ldr	r3, [pc, #172]	@ (80004dc <I2CInit+0x118>)
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	4a2a      	ldr	r2, [pc, #168]	@ (80004dc <I2CInit+0x118>)
 8000434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000438:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SDA*2); // no pull-up/down
 800043a:	4b28      	ldr	r3, [pc, #160]	@ (80004dc <I2CInit+0x118>)
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	4a27      	ldr	r2, [pc, #156]	@ (80004dc <I2CInit+0x118>)
 8000440:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000444:	60d3      	str	r3, [r2, #12]

    // choose AF4 for I2C1 in Alternate Function registers
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL6_Pos); // for pin 6
 8000446:	4b25      	ldr	r3, [pc, #148]	@ (80004dc <I2CInit+0x118>)
 8000448:	6a1b      	ldr	r3, [r3, #32]
 800044a:	4a24      	ldr	r2, [pc, #144]	@ (80004dc <I2CInit+0x118>)
 800044c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000450:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL7_Pos); // for pin 7
 8000452:	4b22      	ldr	r3, [pc, #136]	@ (80004dc <I2CInit+0x118>)
 8000454:	6a1b      	ldr	r3, [r3, #32]
 8000456:	4a21      	ldr	r2, [pc, #132]	@ (80004dc <I2CInit+0x118>)
 8000458:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800045c:	6213      	str	r3, [r2, #32]

    // enable I2C clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800045e:	4b1e      	ldr	r3, [pc, #120]	@ (80004d8 <I2CInit+0x114>)
 8000460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000462:	4a1d      	ldr	r2, [pc, #116]	@ (80004d8 <I2CInit+0x114>)
 8000464:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000468:	6413      	str	r3, [r2, #64]	@ 0x40
	DelayMs(50);
 800046a:	2032      	movs	r0, #50	@ 0x32
 800046c:	f7ff ff00 	bl	8000270 <DelayMs>
    // reset and clear reg
    I2C1->CR1 = I2C_CR1_SWRST;
 8000470:	4b1b      	ldr	r3, [pc, #108]	@ (80004e0 <I2CInit+0x11c>)
 8000472:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000476:	601a      	str	r2, [r3, #0]
    I2C1->CR1 = 0;
 8000478:	4b19      	ldr	r3, [pc, #100]	@ (80004e0 <I2CInit+0x11c>)
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]

    I2C1->CR2 &= ~(I2C_CR2_ITERREN); // disable error interrupt
 800047e:	4b18      	ldr	r3, [pc, #96]	@ (80004e0 <I2CInit+0x11c>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	4a17      	ldr	r2, [pc, #92]	@ (80004e0 <I2CInit+0x11c>)
 8000484:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000488:	6053      	str	r3, [r2, #4]
    I2C1->CCR &= ~(1 << I2C_CCR_FS_Pos); // standard mode (100 khz)
 800048a:	4b15      	ldr	r3, [pc, #84]	@ (80004e0 <I2CInit+0x11c>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a14      	ldr	r2, [pc, #80]	@ (80004e0 <I2CInit+0x11c>)
 8000490:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000494:	61d3      	str	r3, [r2, #28]
    // Enable Ack
    I2C1->CR1 |= (1<<I2C_CR1_ACK_Pos);
 8000496:	4b12      	ldr	r3, [pc, #72]	@ (80004e0 <I2CInit+0x11c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a11      	ldr	r2, [pc, #68]	@ (80004e0 <I2CInit+0x11c>)
 800049c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004a0:	6013      	str	r3, [r2, #0]
    // Thigh and Tlow needs to be 5us each

    // Let's pick fPCLK1 = 16Mhz, TPCLK1 = 1/16Mhz = 62.5ns
    // Thigh = CCR * TPCLK1 => 5us = CCR * 62.5ns
    // CCR = 80
    I2C1->CR2 |= (16 << I2C_CR2_FREQ_Pos); // 16Mhz PCLK
 80004a2:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <I2CInit+0x11c>)
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	4a0e      	ldr	r2, [pc, #56]	@ (80004e0 <I2CInit+0x11c>)
 80004a8:	f043 0310 	orr.w	r3, r3, #16
 80004ac:	6053      	str	r3, [r2, #4]
    I2C1->CCR |= (80 << I2C_CCR_CCR_Pos);
 80004ae:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <I2CInit+0x11c>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	4a0b      	ldr	r2, [pc, #44]	@ (80004e0 <I2CInit+0x11c>)
 80004b4:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80004b8:	61d3      	str	r3, [r2, #28]
    // Maximum rise time.
    // Calculation is (maximum_rise_time / Tpclk) + 1
    // In SM mode maximum allowed SCL rise time is 1000ns
    // For TPCLK1 = 62.5ns => (1000ns / 62.5ns) + 1 = 16 + 1 = 17
    I2C1->TRISE |= (17 << I2C_TRISE_TRISE_Pos); // program Trise to 17 for 100khz
 80004ba:	4b09      	ldr	r3, [pc, #36]	@ (80004e0 <I2CInit+0x11c>)
 80004bc:	6a1b      	ldr	r3, [r3, #32]
 80004be:	4a08      	ldr	r2, [pc, #32]	@ (80004e0 <I2CInit+0x11c>)
 80004c0:	f043 0311 	orr.w	r3, r3, #17
 80004c4:	6213      	str	r3, [r2, #32]
    // Enable I2C
    I2C1->CR1 |= I2C_CR1_PE;
 80004c6:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <I2CInit+0x11c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a05      	ldr	r2, [pc, #20]	@ (80004e0 <I2CInit+0x11c>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6013      	str	r3, [r2, #0]
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40023800 	.word	0x40023800
 80004dc:	40020400 	.word	0x40020400
 80004e0:	40005400 	.word	0x40005400

080004e4 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80004ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000528 <DelayMs+0x44>)
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80004f2:	4b0e      	ldr	r3, [pc, #56]	@ (800052c <DelayMs+0x48>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000530 <DelayMs+0x4c>)
 80004f8:	fba2 2303 	umull	r2, r3, r2, r3
 80004fc:	099b      	lsrs	r3, r3, #6
 80004fe:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	fb02 f303 	mul.w	r3, r2, r3
 8000508:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800050a:	bf00      	nop
 800050c:	4b06      	ldr	r3, [pc, #24]	@ (8000528 <DelayMs+0x44>)
 800050e:	685a      	ldr	r2, [r3, #4]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	1ad2      	subs	r2, r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	429a      	cmp	r2, r3
 8000518:	d3f8      	bcc.n	800050c <DelayMs+0x28>
}
 800051a:	bf00      	nop
 800051c:	bf00      	nop
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	e0001000 	.word	0xe0001000
 800052c:	20000000 	.word	0x20000000
 8000530:	10624dd3 	.word	0x10624dd3

08000534 <LcdWriteByte>:
 *      Author: snehal
 */

#include "i2c_lcd.h"

void LcdWriteByte(uint8_t val) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	I2CStart();
 800053e:	f7ff febf 	bl	80002c0 <I2CStart>
	I2CSendSlaveAddress(LCD_SLAVE_ADDR_W);
 8000542:	204e      	movs	r0, #78	@ 0x4e
 8000544:	f7ff fee8 	bl	8000318 <I2CSendSlaveAddress>
	I2CSendData(val);
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff fefe 	bl	800034c <I2CSendData>
	I2CStop();
 8000550:	f7ff fecc 	bl	80002ec <I2CStop>
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <LcdWrite>:

void LcdWrite(uint8_t rs, uint8_t val) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	460a      	mov	r2, r1
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	4613      	mov	r3, r2
 800056a:	71bb      	strb	r3, [r7, #6]
	uint8_t high = val & 0xF0, low = (val << 4) & 0xF0;
 800056c:	79bb      	ldrb	r3, [r7, #6]
 800056e:	f023 030f 	bic.w	r3, r3, #15
 8000572:	73fb      	strb	r3, [r7, #15]
 8000574:	79bb      	ldrb	r3, [r7, #6]
 8000576:	011b      	lsls	r3, r3, #4
 8000578:	73bb      	strb	r3, [r7, #14]
	uint8_t bvrs = (rs == LCD_CMD) ? 0 : BV(LCD_RS);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	2b80      	cmp	r3, #128	@ 0x80
 800057e:	bf14      	ite	ne
 8000580:	2301      	movne	r3, #1
 8000582:	2300      	moveq	r3, #0
 8000584:	b2db      	uxtb	r3, r3
 8000586:	737b      	strb	r3, [r7, #13]
	LcdWriteByte(high | bvrs | BV(LCD_EN) | BV(LCD_BL));
 8000588:	7bfa      	ldrb	r2, [r7, #15]
 800058a:	7b7b      	ldrb	r3, [r7, #13]
 800058c:	4313      	orrs	r3, r2
 800058e:	b2db      	uxtb	r3, r3
 8000590:	f043 030c 	orr.w	r3, r3, #12
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ffcc 	bl	8000534 <LcdWriteByte>
	DelayMs(1);
 800059c:	2001      	movs	r0, #1
 800059e:	f7ff ffa1 	bl	80004e4 <DelayMs>
	LcdWriteByte(high | bvrs | BV(LCD_BL));
 80005a2:	7bfa      	ldrb	r2, [r7, #15]
 80005a4:	7b7b      	ldrb	r3, [r7, #13]
 80005a6:	4313      	orrs	r3, r2
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	f043 0308 	orr.w	r3, r3, #8
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff ffbf 	bl	8000534 <LcdWriteByte>

	LcdWriteByte(low | bvrs | BV(LCD_EN) | BV(LCD_BL));
 80005b6:	7bba      	ldrb	r2, [r7, #14]
 80005b8:	7b7b      	ldrb	r3, [r7, #13]
 80005ba:	4313      	orrs	r3, r2
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	f043 030c 	orr.w	r3, r3, #12
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff ffb5 	bl	8000534 <LcdWriteByte>
	DelayMs(1);
 80005ca:	2001      	movs	r0, #1
 80005cc:	f7ff ff8a 	bl	80004e4 <DelayMs>
	LcdWriteByte(low | bvrs | BV(LCD_BL));
 80005d0:	7bba      	ldrb	r2, [r7, #14]
 80005d2:	7b7b      	ldrb	r3, [r7, #13]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f043 0308 	orr.w	r3, r3, #8
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ffa8 	bl	8000534 <LcdWriteByte>
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <LcdInit>:

// As per 4-bit initialization sequence mentioned HD44780 datasheet fig 24 (page 46)
int LcdInit() {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
	// wait for min 15 ms (for 5V)
	DelayMs(20);
 80005f2:	2014      	movs	r0, #20
 80005f4:	f7ff ff76 	bl	80004e4 <DelayMs>
	I2CInit();
 80005f8:	f7ff fee4 	bl	80003c4 <I2CInit>
	// check if lcd is ready
	I2CStart();
 80005fc:	f7ff fe60 	bl	80002c0 <I2CStart>
	int ret = I2CIsDeviceReady(LCD_SLAVE_ADDR_W);
 8000600:	204e      	movs	r0, #78	@ 0x4e
 8000602:	f7ff fec1 	bl	8000388 <I2CIsDeviceReady>
 8000606:	6078      	str	r0, [r7, #4]
	I2CStop();
 8000608:	f7ff fe70 	bl	80002ec <I2CStop>
	if(!ret)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <LcdInit+0x2a>
		return 0;
 8000612:	2300      	movs	r3, #0
 8000614:	e04a      	b.n	80006ac <LcdInit+0xc0>

	// attention sequence
	LcdWriteByte(LCD_FN_SET_8BIT | BV(LCD_EN));
 8000616:	2034      	movs	r0, #52	@ 0x34
 8000618:	f7ff ff8c 	bl	8000534 <LcdWriteByte>
	__NOP();
 800061c:	bf00      	nop
	LcdWriteByte(LCD_FN_SET_8BIT);
 800061e:	2030      	movs	r0, #48	@ 0x30
 8000620:	f7ff ff88 	bl	8000534 <LcdWriteByte>
	DelayMs(5);
 8000624:	2005      	movs	r0, #5
 8000626:	f7ff ff5d 	bl	80004e4 <DelayMs>

	LcdWriteByte(LCD_FN_SET_8BIT | BV(LCD_EN));
 800062a:	2034      	movs	r0, #52	@ 0x34
 800062c:	f7ff ff82 	bl	8000534 <LcdWriteByte>
	__NOP();
 8000630:	bf00      	nop
	LcdWriteByte(LCD_FN_SET_8BIT);
 8000632:	2030      	movs	r0, #48	@ 0x30
 8000634:	f7ff ff7e 	bl	8000534 <LcdWriteByte>
	DelayMs(1);
 8000638:	2001      	movs	r0, #1
 800063a:	f7ff ff53 	bl	80004e4 <DelayMs>

	LcdWriteByte(LCD_FN_SET_8BIT | BV(LCD_EN));
 800063e:	2034      	movs	r0, #52	@ 0x34
 8000640:	f7ff ff78 	bl	8000534 <LcdWriteByte>
	__NOP();
 8000644:	bf00      	nop
	LcdWriteByte(LCD_FN_SET_8BIT);
 8000646:	2030      	movs	r0, #48	@ 0x30
 8000648:	f7ff ff74 	bl	8000534 <LcdWriteByte>
	DelayMs(3);
 800064c:	2003      	movs	r0, #3
 800064e:	f7ff ff49 	bl	80004e4 <DelayMs>

	LcdWriteByte(LCD_FN_SET_4BIT | BV(LCD_EN));
 8000652:	2024      	movs	r0, #36	@ 0x24
 8000654:	f7ff ff6e 	bl	8000534 <LcdWriteByte>
	__NOP();
 8000658:	bf00      	nop
	LcdWriteByte(LCD_FN_SET_4BIT);
 800065a:	2020      	movs	r0, #32
 800065c:	f7ff ff6a 	bl	8000534 <LcdWriteByte>
	DelayMs(3);
 8000660:	2003      	movs	r0, #3
 8000662:	f7ff ff3f 	bl	80004e4 <DelayMs>

	// lcd initialization
	LcdWriteByte(LCD_FN_SET_4BIT_2LINES);
 8000666:	2028      	movs	r0, #40	@ 0x28
 8000668:	f7ff ff64 	bl	8000534 <LcdWriteByte>
	DelayMs(1);
 800066c:	2001      	movs	r0, #1
 800066e:	f7ff ff39 	bl	80004e4 <DelayMs>
	LcdWrite(LCD_CMD, LCD_DISP_CTRL);
 8000672:	2108      	movs	r1, #8
 8000674:	2080      	movs	r0, #128	@ 0x80
 8000676:	f7ff ff71 	bl	800055c <LcdWrite>
	DelayMs(1);
 800067a:	2001      	movs	r0, #1
 800067c:	f7ff ff32 	bl	80004e4 <DelayMs>
	LcdWrite(LCD_CMD, LCD_CLEAR);
 8000680:	2101      	movs	r1, #1
 8000682:	2080      	movs	r0, #128	@ 0x80
 8000684:	f7ff ff6a 	bl	800055c <LcdWrite>
	DelayMs(1);
 8000688:	2001      	movs	r0, #1
 800068a:	f7ff ff2b 	bl	80004e4 <DelayMs>
	LcdWrite(LCD_CMD, LCD_ENTRY_MODE);
 800068e:	2106      	movs	r1, #6
 8000690:	2080      	movs	r0, #128	@ 0x80
 8000692:	f7ff ff63 	bl	800055c <LcdWrite>
	DelayMs(1);
 8000696:	2001      	movs	r0, #1
 8000698:	f7ff ff24 	bl	80004e4 <DelayMs>
	LcdWrite(LCD_CMD, LCD_DISP_ON);
 800069c:	210c      	movs	r1, #12
 800069e:	2080      	movs	r0, #128	@ 0x80
 80006a0:	f7ff ff5c 	bl	800055c <LcdWrite>
	DelayMs(1);
 80006a4:	2001      	movs	r0, #1
 80006a6:	f7ff ff1d 	bl	80004e4 <DelayMs>
	return ret;
 80006aa:	687b      	ldr	r3, [r7, #4]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <LcdPuts>:

void LcdPuts(uint8_t line, char str[]) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	6039      	str	r1, [r7, #0]
 80006be:	71fb      	strb	r3, [r7, #7]
	int i;
	LcdWrite(LCD_CMD, line); // line address
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	4619      	mov	r1, r3
 80006c4:	2080      	movs	r0, #128	@ 0x80
 80006c6:	f7ff ff49 	bl	800055c <LcdWrite>
	DelayMs(1);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f7ff ff0a 	bl	80004e4 <DelayMs>
	for(i=0; str[i]!='\0'; i++)
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	e00a      	b.n	80006ec <LcdPuts+0x38>
		LcdWrite(LCD_DATA, str[i]);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	683a      	ldr	r2, [r7, #0]
 80006da:	4413      	add	r3, r2
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	4619      	mov	r1, r3
 80006e0:	2001      	movs	r0, #1
 80006e2:	f7ff ff3b 	bl	800055c <LcdWrite>
	for(i=0; str[i]!='\0'; i++)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	3301      	adds	r3, #1
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	4413      	add	r3, r2
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d1ee      	bne.n	80006d6 <LcdPuts+0x22>
}
 80006f8:	bf00      	nop
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 800070c:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <DelayMs+0x44>)
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <DelayMs+0x48>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a0e      	ldr	r2, [pc, #56]	@ (8000750 <DelayMs+0x4c>)
 8000718:	fba2 2303 	umull	r2, r3, r2, r3
 800071c:	099b      	lsrs	r3, r3, #6
 800071e:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	fb02 f303 	mul.w	r3, r2, r3
 8000728:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800072a:	bf00      	nop
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <DelayMs+0x44>)
 800072e:	685a      	ldr	r2, [r3, #4]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	1ad2      	subs	r2, r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	429a      	cmp	r2, r3
 8000738:	d3f8      	bcc.n	800072c <DelayMs+0x28>
}
 800073a:	bf00      	nop
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e0001000 	.word	0xe0001000
 800074c:	20000000 	.word	0x20000000
 8000750:	10624dd3 	.word	0x10624dd3

08000754 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b093      	sub	sp, #76	@ 0x4c
 8000758:	af02      	add	r7, sp, #8
	char str1[24], str2[20];
	RTC_Date d, dt = { .Date = 28, .Month = 02, .Year = 24, .WeekDay = 3 };
 800075a:	4b36      	ldr	r3, [pc, #216]	@ (8000834 <main+0xe0>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	60fb      	str	r3, [r7, #12]
	RTC_Time t, tm = { .Hours = 23, .Minutes = 59, .Seconds = 50 };
 8000760:	4a35      	ldr	r2, [pc, #212]	@ (8000838 <main+0xe4>)
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	6812      	ldr	r2, [r2, #0]
 8000766:	4611      	mov	r1, r2
 8000768:	8019      	strh	r1, [r3, #0]
 800076a:	3302      	adds	r3, #2
 800076c:	0c12      	lsrs	r2, r2, #16
 800076e:	701a      	strb	r2, [r3, #0]

	SystemInit();
 8000770:	f000 fa50 	bl	8000c14 <SystemInit>
	LcdInit();
 8000774:	f7ff ff3a 	bl	80005ec <LcdInit>
	UartInit(BAUD_9600);
 8000778:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 800077c:	f000 fa80 	bl	8000c80 <UartInit>
	UartPuts("Real time clock...\r\n");
 8000780:	482e      	ldr	r0, [pc, #184]	@ (800083c <main+0xe8>)
 8000782:	f000 fb01 	bl	8000d88 <UartPuts>
	UartPuts("time clock...\r\n");
 8000786:	482e      	ldr	r0, [pc, #184]	@ (8000840 <main+0xec>)
 8000788:	f000 fafe 	bl	8000d88 <UartPuts>
 //   LcdPuts(LCD_LINE1,+ "DESD @ Sunbeam\n");
	LcdPuts(LCD_LINE2, "STM32 RTC Demo!\n");
 800078c:	492d      	ldr	r1, [pc, #180]	@ (8000844 <main+0xf0>)
 800078e:	20c0      	movs	r0, #192	@ 0xc0
 8000790:	f7ff ff90 	bl	80006b4 <LcdPuts>
	DelayMs(1000);
 8000794:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000798:	f7ff ffb4 	bl	8000704 <DelayMs>
	LcdWrite(LCD_CMD, LCD_CLEAR);
 800079c:	2101      	movs	r1, #1
 800079e:	2080      	movs	r0, #128	@ 0x80
 80007a0:	f7ff fedc 	bl	800055c <LcdWrite>
	RTC_Init(&dt, &tm);
 80007a4:	1d3a      	adds	r2, r7, #4
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f8a9 	bl	8000904 <RTC_Init>
	while(1) {
		RTC_GetTime(&t);
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f9bc 	bl	8000b34 <RTC_GetTime>
		RTC_GetDate(&d);
 80007bc:	f107 0310 	add.w	r3, r7, #16
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f971 	bl	8000aa8 <RTC_GetDate>
		sprintf(str1, "DT=%02d-%02d-%02d W=%d\t", d.Date, d.Month, d.Year, d.WeekDay);
 80007c6:	7c3b      	ldrb	r3, [r7, #16]
 80007c8:	4619      	mov	r1, r3
 80007ca:	7c7b      	ldrb	r3, [r7, #17]
 80007cc:	461c      	mov	r4, r3
 80007ce:	7cbb      	ldrb	r3, [r7, #18]
 80007d0:	7cfa      	ldrb	r2, [r7, #19]
 80007d2:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80007d6:	9201      	str	r2, [sp, #4]
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	4623      	mov	r3, r4
 80007dc:	460a      	mov	r2, r1
 80007de:	491a      	ldr	r1, [pc, #104]	@ (8000848 <main+0xf4>)
 80007e0:	f000 fb18 	bl	8000e14 <siprintf>
		UartPuts(str1);
 80007e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 facd 	bl	8000d88 <UartPuts>
		sprintf(str2, "TM=%02d:%02d:%02d\r", t.Hours, t.Minutes, t.Seconds);
 80007ee:	7a3b      	ldrb	r3, [r7, #8]
 80007f0:	461a      	mov	r2, r3
 80007f2:	7a7b      	ldrb	r3, [r7, #9]
 80007f4:	4619      	mov	r1, r3
 80007f6:	7abb      	ldrb	r3, [r7, #10]
 80007f8:	f107 0014 	add.w	r0, r7, #20
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	460b      	mov	r3, r1
 8000800:	4912      	ldr	r1, [pc, #72]	@ (800084c <main+0xf8>)
 8000802:	f000 fb07 	bl	8000e14 <siprintf>
		UartPuts(str2);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fabc 	bl	8000d88 <UartPuts>
		LcdPuts(LCD_LINE1, str1);
 8000810:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000814:	4619      	mov	r1, r3
 8000816:	2080      	movs	r0, #128	@ 0x80
 8000818:	f7ff ff4c 	bl	80006b4 <LcdPuts>
		LcdPuts(LCD_LINE2, str2);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	20c0      	movs	r0, #192	@ 0xc0
 8000824:	f7ff ff46 	bl	80006b4 <LcdPuts>

		DelayMs(1000);
 8000828:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800082c:	f7ff ff6a 	bl	8000704 <DelayMs>
		RTC_GetTime(&t);
 8000830:	bf00      	nop
 8000832:	e7be      	b.n	80007b2 <main+0x5e>
 8000834:	080017c4 	.word	0x080017c4
 8000838:	080017c8 	.word	0x080017c8
 800083c:	0800175c 	.word	0x0800175c
 8000840:	08001774 	.word	0x08001774
 8000844:	08001784 	.word	0x08001784
 8000848:	08001798 	.word	0x08001798
 800084c:	080017b0 	.word	0x080017b0

08000850 <Bin2Bcd>:
 */

#include "rtc.h"

uint16_t Bin2Bcd(uint16_t val)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	80fb      	strh	r3, [r7, #6]
	uint16_t unit = val %10;
 800085a:	88fa      	ldrh	r2, [r7, #6]
 800085c:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <Bin2Bcd+0x68>)
 800085e:	fba3 1302 	umull	r1, r3, r3, r2
 8000862:	08d9      	lsrs	r1, r3, #3
 8000864:	460b      	mov	r3, r1
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	440b      	add	r3, r1
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	81fb      	strh	r3, [r7, #14]
	uint16_t tens = (val/10)%10;
 8000870:	88fb      	ldrh	r3, [r7, #6]
 8000872:	4a11      	ldr	r2, [pc, #68]	@ (80008b8 <Bin2Bcd+0x68>)
 8000874:	fba2 2303 	umull	r2, r3, r2, r3
 8000878:	08db      	lsrs	r3, r3, #3
 800087a:	b29a      	uxth	r2, r3
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <Bin2Bcd+0x68>)
 800087e:	fba3 1302 	umull	r1, r3, r3, r2
 8000882:	08d9      	lsrs	r1, r3, #3
 8000884:	460b      	mov	r3, r1
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	440b      	add	r3, r1
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	81bb      	strh	r3, [r7, #12]
//	uint16_t hundreds = (val / 100) % 10;
//	uint16_t thousands = (val / 1000) % 10;
	uint16_t res=0;
 8000890:	2300      	movs	r3, #0
 8000892:	817b      	strh	r3, [r7, #10]
	res |= unit;
 8000894:	897a      	ldrh	r2, [r7, #10]
 8000896:	89fb      	ldrh	r3, [r7, #14]
 8000898:	4313      	orrs	r3, r2
 800089a:	817b      	strh	r3, [r7, #10]
	res |= tens <<4;
 800089c:	89bb      	ldrh	r3, [r7, #12]
 800089e:	011b      	lsls	r3, r3, #4
 80008a0:	b21a      	sxth	r2, r3
 80008a2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	b21b      	sxth	r3, r3
 80008aa:	817b      	strh	r3, [r7, #10]
//	res |= hundreds << 8;
//	res |= thousands << 12;
	return res;
 80008ac:	897b      	ldrh	r3, [r7, #10]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	cccccccd 	.word	0xcccccccd

080008bc <Bcd2Bin>:

uint16_t Bcd2Bin(uint16_t val)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
	uint16_t unit = (val & 0x0F);
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	f003 030f 	and.w	r3, r3, #15
 80008cc:	81fb      	strh	r3, [r7, #14]
		uint16_t tens = ((val >> 4) & 0x0F) * 10;
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	091b      	lsrs	r3, r3, #4
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	f003 030f 	and.w	r3, r3, #15
 80008d8:	b29b      	uxth	r3, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	0092      	lsls	r2, r2, #2
 80008de:	4413      	add	r3, r2
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	81bb      	strh	r3, [r7, #12]
	//	uint16_t hundreds = ((val >> 8) & 0x0F) * 100;
	//	uint16_t thousands = ((val >> 12) & 0x0F) * 1000;
		uint16_t res = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	817b      	strh	r3, [r7, #10]
		res += unit;
 80008e8:	897a      	ldrh	r2, [r7, #10]
 80008ea:	89fb      	ldrh	r3, [r7, #14]
 80008ec:	4413      	add	r3, r2
 80008ee:	817b      	strh	r3, [r7, #10]
		res += tens;
 80008f0:	897a      	ldrh	r2, [r7, #10]
 80008f2:	89bb      	ldrh	r3, [r7, #12]
 80008f4:	4413      	add	r3, r2
 80008f6:	817b      	strh	r3, [r7, #10]
	//	res += hundreds;
	//	res += thousands;
		return res;
 80008f8:	897b      	ldrh	r3, [r7, #10]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <RTC_Init>:

void RTC_Init(RTC_Date *dt, RTC_Time *tm)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
	// Initialize RTC
	// Initialize RTC
		RCC->APB1ENR |= RCC_APB1ENR_PWREN;		//enable peripheral clock power
 800090e:	4b28      	ldr	r3, [pc, #160]	@ (80009b0 <RTC_Init+0xac>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000912:	4a27      	ldr	r2, [pc, #156]	@ (80009b0 <RTC_Init+0xac>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000918:	6413      	str	r3, [r2, #64]	@ 0x40
		PWR->CR |= PWR_CR_DBP;			//enable access to the RTC registers (stm32 manual 5.4)
 800091a:	4b26      	ldr	r3, [pc, #152]	@ (80009b4 <RTC_Init+0xb0>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a25      	ldr	r2, [pc, #148]	@ (80009b4 <RTC_Init+0xb0>)
 8000920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000924:	6013      	str	r3, [r2, #0]

		RCC->CSR |= RCC_CSR_LSION;				//enable LSI (stm32 manual 7.3.21)
 8000926:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <RTC_Init+0xac>)
 8000928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800092a:	4a21      	ldr	r2, [pc, #132]	@ (80009b0 <RTC_Init+0xac>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6753      	str	r3, [r2, #116]	@ 0x74
		while(!(RCC->CSR & RCC_CSR_LSIRDY));	//wait for LSI ready flag
 8000932:	bf00      	nop
 8000934:	4b1e      	ldr	r3, [pc, #120]	@ (80009b0 <RTC_Init+0xac>)
 8000936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000938:	f003 0302 	and.w	r3, r3, #2
 800093c:	2b00      	cmp	r3, #0
 800093e:	d0f9      	beq.n	8000934 <RTC_Init+0x30>

		RCC->BDCR |= RCC_BDCR_RTCEN | RCC_BDCR_RTCSEL_1;    // select LSI (32 KHz) and enable RTC (stm32 manual 7.3.21)
 8000940:	4b1b      	ldr	r3, [pc, #108]	@ (80009b0 <RTC_Init+0xac>)
 8000942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000944:	4a1a      	ldr	r2, [pc, #104]	@ (80009b0 <RTC_Init+0xac>)
 8000946:	f443 4302 	orr.w	r3, r3, #33280	@ 0x8200
 800094a:	6713      	str	r3, [r2, #112]	@ 0x70

		RTC->WPR = 0xCA;			// enter key to unlock write protection
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <RTC_Init+0xb4>)
 800094e:	22ca      	movs	r2, #202	@ 0xca
 8000950:	625a      	str	r2, [r3, #36]	@ 0x24
		RTC->WPR = 0x53;			// key sequence must be 0xCA and then 0x53 (stm32 manual 26.3.5)
 8000952:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <RTC_Init+0xb4>)
 8000954:	2253      	movs	r2, #83	@ 0x53
 8000956:	625a      	str	r2, [r3, #36]	@ 0x24

		RTC->ISR |= RTC_ISR_INIT;	// enable rtc setup (i.e. register init)
 8000958:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <RTC_Init+0xb4>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	4a16      	ldr	r2, [pc, #88]	@ (80009b8 <RTC_Init+0xb4>)
 800095e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000962:	60d3      	str	r3, [r2, #12]
		while(!(RTC->ISR & RTC_ISR_INITF));	// wait until register update is allowed
 8000964:	bf00      	nop
 8000966:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <RTC_Init+0xb4>)
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800096e:	2b00      	cmp	r3, #0
 8000970:	d0f9      	beq.n	8000966 <RTC_Init+0x62>
		//	rtc_cntrclk = rtcclk / (async div + 1) * (sync div + 1)
		//		rtc_cntrclk should be 1 Hz (for accurate timing)
		//		high async div (7-bit) => low power | sync div (15-bit)
		//		for LSI = 32KHz = 32000 Hz and rtc_cntrclk = 1 Hz,
		//			if async div = 128, then sync div = 250
		RTC->PRER = ((128-1) << RTC_PRER_PREDIV_A_Pos) | ((250-1) << RTC_PRER_PREDIV_S_Pos);
 8000972:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <RTC_Init+0xb4>)
 8000974:	4a11      	ldr	r2, [pc, #68]	@ (80009bc <RTC_Init+0xb8>)
 8000976:	611a      	str	r2, [r3, #16]

		RTC_SetDate(dt);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f000 f821 	bl	80009c0 <RTC_SetDate>
		RTC_SetTime(tm);
 800097e:	6838      	ldr	r0, [r7, #0]
 8000980:	f000 f85c 	bl	8000a3c <RTC_SetTime>

		RTC->CR |= RTC_CR_BYPSHAD;		// rtc date/time should be read from calendar registers (not shadow registers)
 8000984:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <RTC_Init+0xb4>)
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	4a0b      	ldr	r2, [pc, #44]	@ (80009b8 <RTC_Init+0xb4>)
 800098a:	f043 0320 	orr.w	r3, r3, #32
 800098e:	6093      	str	r3, [r2, #8]
		RTC->ISR &= ~RTC_ISR_INIT;		// rtc is free running now (not in initialization mode)
 8000990:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <RTC_Init+0xb4>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	4a08      	ldr	r2, [pc, #32]	@ (80009b8 <RTC_Init+0xb4>)
 8000996:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800099a:	60d3      	str	r3, [r2, #12]
		PWR->CR &= ~PWR_CR_DBP;			// disable access to RTC registers (write protection)
 800099c:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <RTC_Init+0xb0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a04      	ldr	r2, [pc, #16]	@ (80009b4 <RTC_Init+0xb0>)
 80009a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40007000 	.word	0x40007000
 80009b8:	40002800 	.word	0x40002800
 80009bc:	007f00f9 	.word	0x007f00f9

080009c0 <RTC_SetDate>:

void RTC_SetDate(RTC_Date *dt)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
		uint8_t date = Bin2Bcd(dt->Date);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff3f 	bl	8000850 <Bin2Bcd>
 80009d2:	4603      	mov	r3, r0
 80009d4:	73fb      	strb	r3, [r7, #15]
		uint8_t month = Bin2Bcd(dt->Month);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	785b      	ldrb	r3, [r3, #1]
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff38 	bl	8000850 <Bin2Bcd>
 80009e0:	4603      	mov	r3, r0
 80009e2:	73bb      	strb	r3, [r7, #14]
		uint8_t year = Bin2Bcd(dt->Year);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	789b      	ldrb	r3, [r3, #2]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff31 	bl	8000850 <Bin2Bcd>
 80009ee:	4603      	mov	r3, r0
 80009f0:	737b      	strb	r3, [r7, #13]
		uint8_t weekday = Bin2Bcd(dt->WeekDay);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	78db      	ldrb	r3, [r3, #3]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ff2a 	bl	8000850 <Bin2Bcd>
 80009fc:	4603      	mov	r3, r0
 80009fe:	733b      	strb	r3, [r7, #12]
		uint32_t dr = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
		dr |= year << RTC_DR_YU_Pos;
 8000a04:	7b7b      	ldrb	r3, [r7, #13]
 8000a06:	041b      	lsls	r3, r3, #16
 8000a08:	68ba      	ldr	r2, [r7, #8]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	60bb      	str	r3, [r7, #8]
		dr |= weekday << RTC_DR_WDU_Pos;
 8000a0e:	7b3b      	ldrb	r3, [r7, #12]
 8000a10:	035b      	lsls	r3, r3, #13
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
		dr |= month << RTC_DR_MU_Pos;
 8000a18:	7bbb      	ldrb	r3, [r7, #14]
 8000a1a:	021b      	lsls	r3, r3, #8
 8000a1c:	68ba      	ldr	r2, [r7, #8]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	60bb      	str	r3, [r7, #8]
		dr |= date << RTC_DR_DU_Pos;
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	68ba      	ldr	r2, [r7, #8]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	60bb      	str	r3, [r7, #8]
		RTC->DR = dr;
 8000a2a:	4a03      	ldr	r2, [pc, #12]	@ (8000a38 <RTC_SetDate+0x78>)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	6053      	str	r3, [r2, #4]
}
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40002800 	.word	0x40002800

08000a3c <RTC_SetTime>:
void RTC_SetTime(RTC_Time *tm)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
		uint8_t hrs = Bin2Bcd(tm->Hours);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff01 	bl	8000850 <Bin2Bcd>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	73fb      	strb	r3, [r7, #15]
		uint8_t min = Bin2Bcd(tm->Minutes);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	785b      	ldrb	r3, [r3, #1]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fefa 	bl	8000850 <Bin2Bcd>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	73bb      	strb	r3, [r7, #14]
		uint8_t sec = Bin2Bcd(tm->Seconds);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	789b      	ldrb	r3, [r3, #2]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fef3 	bl	8000850 <Bin2Bcd>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	737b      	strb	r3, [r7, #13]
		uint32_t tr = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
		tr |= hrs << RTC_TR_HU_Pos;
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	041b      	lsls	r3, r3, #16
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
		tr |= min << RTC_TR_MNU_Pos;
 8000a7c:	7bbb      	ldrb	r3, [r7, #14]
 8000a7e:	021b      	lsls	r3, r3, #8
 8000a80:	68ba      	ldr	r2, [r7, #8]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	60bb      	str	r3, [r7, #8]
		tr |= sec << RTC_TR_SU_Pos;
 8000a86:	7b7b      	ldrb	r3, [r7, #13]
 8000a88:	68ba      	ldr	r2, [r7, #8]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	60bb      	str	r3, [r7, #8]
		tr &= ~RTC_TR_PM; // 24-hours mode
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000a94:	60bb      	str	r3, [r7, #8]
		RTC->TR = tr;
 8000a96:	4a03      	ldr	r2, [pc, #12]	@ (8000aa4 <RTC_SetTime+0x68>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40002800 	.word	0x40002800

08000aa8 <RTC_GetDate>:
void RTC_GetDate(RTC_Date *dt)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
		uint32_t dr = RTC->DR;
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <RTC_GetDate+0x88>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	60fb      	str	r3, [r7, #12]
		uint8_t val = (dr & (RTC_DR_DT_Msk | RTC_DR_DU_Msk)) >> RTC_DR_DU_Pos;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000abe:	72fb      	strb	r3, [r7, #11]
		dt->Date = Bcd2Bin(val);
 8000ac0:	7afb      	ldrb	r3, [r7, #11]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fef9 	bl	80008bc <Bcd2Bin>
 8000aca:	4603      	mov	r3, r0
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	701a      	strb	r2, [r3, #0]
		val = (dr & (RTC_DR_MT_Msk | RTC_DR_MU_Msk)) >> RTC_DR_MU_Pos;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f003 031f 	and.w	r3, r3, #31
 8000adc:	72fb      	strb	r3, [r7, #11]
		dt->Month = Bcd2Bin(val);
 8000ade:	7afb      	ldrb	r3, [r7, #11]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff feea 	bl	80008bc <Bcd2Bin>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	705a      	strb	r2, [r3, #1]
		val = (dr & (RTC_DR_YT_Msk | RTC_DR_YU_Msk)) >> RTC_DR_YU_Pos;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	0c1b      	lsrs	r3, r3, #16
 8000af4:	72fb      	strb	r3, [r7, #11]
		dt->Year = Bcd2Bin(val);
 8000af6:	7afb      	ldrb	r3, [r7, #11]
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff fede 	bl	80008bc <Bcd2Bin>
 8000b00:	4603      	mov	r3, r0
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	709a      	strb	r2, [r3, #2]
		val = (dr & (RTC_DR_WDU_Msk)) >> RTC_DR_WDU_Pos;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	0b5b      	lsrs	r3, r3, #13
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	72fb      	strb	r3, [r7, #11]
		dt->WeekDay = Bcd2Bin(val);
 8000b14:	7afb      	ldrb	r3, [r7, #11]
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fecf 	bl	80008bc <Bcd2Bin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	70da      	strb	r2, [r3, #3]
}
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40002800 	.word	0x40002800

08000b34 <RTC_GetTime>:
void RTC_GetTime(RTC_Time *tm)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
		uint32_t tr = RTC->TR;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <RTC_GetTime+0x70>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	60fb      	str	r3, [r7, #12]
		uint8_t val = (tr & (RTC_TR_HT_Msk | RTC_TR_HU_Msk)) >> RTC_TR_HU_Pos;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	0c1b      	lsrs	r3, r3, #16
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b4c:	72fb      	strb	r3, [r7, #11]
		tm->Hours = Bcd2Bin(val);
 8000b4e:	7afb      	ldrb	r3, [r7, #11]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff feb2 	bl	80008bc <Bcd2Bin>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	701a      	strb	r2, [r3, #0]
		val = (tr & (RTC_TR_MNT_Msk | RTC_TR_MNU_Msk)) >> RTC_TR_MNU_Pos;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	0a1b      	lsrs	r3, r3, #8
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b6a:	72fb      	strb	r3, [r7, #11]
		tm->Minutes = Bcd2Bin(val);
 8000b6c:	7afb      	ldrb	r3, [r7, #11]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fea3 	bl	80008bc <Bcd2Bin>
 8000b76:	4603      	mov	r3, r0
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	705a      	strb	r2, [r3, #1]
		val = (tr & (RTC_TR_ST_Msk | RTC_TR_SU_Msk)) >> RTC_TR_SU_Pos;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b86:	72fb      	strb	r3, [r7, #11]
		tm->Seconds = Bcd2Bin(val);
 8000b88:	7afb      	ldrb	r3, [r7, #11]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fe95 	bl	80008bc <Bcd2Bin>
 8000b92:	4603      	mov	r3, r0
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	709a      	strb	r2, [r3, #2]
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40002800 	.word	0x40002800

08000ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb0:	4a14      	ldr	r2, [pc, #80]	@ (8000c04 <_sbrk+0x5c>)
 8000bb2:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <_sbrk+0x60>)
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bbc:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d102      	bne.n	8000bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <_sbrk+0x64>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	@ (8000c10 <_sbrk+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bca:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d207      	bcs.n	8000be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd8:	f000 f93c 	bl	8000e54 <__errno>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000be6:	e009      	b.n	8000bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be8:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bee:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a05      	ldr	r2, [pc, #20]	@ (8000c0c <_sbrk+0x64>)
 8000bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20020000 	.word	0x20020000
 8000c08:	00000400 	.word	0x00000400
 8000c0c:	20000070 	.word	0x20000070
 8000c10:	200001c0 	.word	0x200001c0

08000c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  DWT_Init();
 8000c18:	f000 f802 	bl	8000c20 <DWT_Init>
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000c24:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <DWT_Init+0x58>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	4a13      	ldr	r2, [pc, #76]	@ (8000c78 <DWT_Init+0x58>)
 8000c2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000c2e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <DWT_Init+0x58>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	4a10      	ldr	r2, [pc, #64]	@ (8000c78 <DWT_Init+0x58>)
 8000c36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c3a:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <DWT_Init+0x5c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0e      	ldr	r2, [pc, #56]	@ (8000c7c <DWT_Init+0x5c>)
 8000c42:	f023 0301 	bic.w	r3, r3, #1
 8000c46:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <DWT_Init+0x5c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c7c <DWT_Init+0x5c>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000c54:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <DWT_Init+0x5c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000c5a:	bf00      	nop
    __ASM volatile ("NOP");
 8000c5c:	bf00      	nop
    __ASM volatile ("NOP");
 8000c5e:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <DWT_Init+0x5c>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	bf0c      	ite	eq
 8000c68:	2301      	moveq	r3, #1
 8000c6a:	2300      	movne	r3, #0
 8000c6c:	b2db      	uxtb	r3, r3
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000edf0 	.word	0xe000edf0
 8000c7c:	e0001000 	.word	0xe0001000

08000c80 <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	// UART GPIO Init -- PA.2 (Tx) and PA.3 (Rx)
	// enable clock
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 8000c88:	4b31      	ldr	r3, [pc, #196]	@ (8000d50 <UartInit+0xd0>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8c:	4a30      	ldr	r2, [pc, #192]	@ (8000d50 <UartInit+0xd0>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6313      	str	r3, [r2, #48]	@ 0x30
	//	alt fn = 0111 = 7 (Uart Tx and Rx)
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 8000c94:	4b2f      	ldr	r3, [pc, #188]	@ (8000d54 <UartInit+0xd4>)
 8000c96:	6a1b      	ldr	r3, [r3, #32]
 8000c98:	4a2e      	ldr	r2, [pc, #184]	@ (8000d54 <UartInit+0xd4>)
 8000c9a:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000c9e:	6213      	str	r3, [r2, #32]
	// 	mode=10 (alt fn), speed=00 (low), pupdr=00 (none), typer=0 (push-pull)
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 8000ca0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d54 <UartInit+0xd4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a2b      	ldr	r2, [pc, #172]	@ (8000d54 <UartInit+0xd4>)
 8000ca6:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000caa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 8000cac:	4b29      	ldr	r3, [pc, #164]	@ (8000d54 <UartInit+0xd4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a28      	ldr	r2, [pc, #160]	@ (8000d54 <UartInit+0xd4>)
 8000cb2:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8000cb6:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000cb8:	4b26      	ldr	r3, [pc, #152]	@ (8000d54 <UartInit+0xd4>)
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	4a25      	ldr	r2, [pc, #148]	@ (8000d54 <UartInit+0xd4>)
 8000cbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000cc2:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000cc4:	4b23      	ldr	r3, [pc, #140]	@ (8000d54 <UartInit+0xd4>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	4a22      	ldr	r2, [pc, #136]	@ (8000d54 <UartInit+0xd4>)
 8000cca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000cce:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 8000cd0:	4b20      	ldr	r3, [pc, #128]	@ (8000d54 <UartInit+0xd4>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d54 <UartInit+0xd4>)
 8000cd6:	f023 030c 	bic.w	r3, r3, #12
 8000cda:	6053      	str	r3, [r2, #4]

	// UART Config
	// enable uart clock
	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <UartInit+0xd0>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d50 <UartInit+0xd0>)
 8000ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce6:	6413      	str	r3, [r2, #64]	@ 0x40
	// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d58 <UartInit+0xd8>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	60da      	str	r2, [r3, #12]
	// 1 stop bit (STOP=00), disable clock (CLKEN=0)
	USART2->CR2 = 0x00000000;
 8000cee:	4b1a      	ldr	r3, [pc, #104]	@ (8000d58 <UartInit+0xd8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
	// no hw control, no irda, no dma, no interupts
	USART2->CR3 = 0x00000000;
 8000cf4:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <UartInit+0xd8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	615a      	str	r2, [r3, #20]
	// set BRR for given baud rate
	switch(baud) {
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000d00:	d016      	beq.n	8000d30 <UartInit+0xb0>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000d08:	d816      	bhi.n	8000d38 <UartInit+0xb8>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000d10:	d004      	beq.n	8000d1c <UartInit+0x9c>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000d18:	d005      	beq.n	8000d26 <UartInit+0xa6>
 8000d1a:	e00d      	b.n	8000d38 <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <UartInit+0xd8>)
 8000d1e:	f240 6283 	movw	r2, #1667	@ 0x683
 8000d22:	609a      	str	r2, [r3, #8]
			break;
 8000d24:	e008      	b.n	8000d38 <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 8000d26:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <UartInit+0xd8>)
 8000d28:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000d2c:	609a      	str	r2, [r3, #8]
			break;
 8000d2e:	e003      	b.n	8000d38 <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 8000d30:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <UartInit+0xd8>)
 8000d32:	228b      	movs	r2, #139	@ 0x8b
 8000d34:	609a      	str	r2, [r3, #8]
			break;
 8000d36:	bf00      	nop
	}
	// uart enable (UE=1)
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 8000d38:	4b07      	ldr	r3, [pc, #28]	@ (8000d58 <UartInit+0xd8>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	4a06      	ldr	r2, [pc, #24]	@ (8000d58 <UartInit+0xd8>)
 8000d3e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40004400 	.word	0x40004400

08000d5c <UartPutch>:

void UartPutch(uint8_t ch) {
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
	// wait until TDR is empty (i.e. prev byte transmitted)
	while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 8000d66:	bf00      	nop
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <UartPutch+0x28>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0f9      	beq.n	8000d68 <UartPutch+0xc>
		;
	// write new byte in TDR
	USART2->DR = ch;
 8000d74:	4a03      	ldr	r2, [pc, #12]	@ (8000d84 <UartPutch+0x28>)
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	6053      	str	r3, [r2, #4]
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	40004400 	.word	0x40004400

08000d88 <UartPuts>:
	// read received byte from RDR
	char ch = USART2->DR;
	return ch;
}

void UartPuts(char str[]) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; str[i]!='\0'; i++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	e009      	b.n	8000daa <UartPuts+0x22>
		UartPutch(str[i]);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ffdc 	bl	8000d5c <UartPutch>
	for(i=0; str[i]!='\0'; i++)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	3301      	adds	r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	4413      	add	r3, r2
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1ef      	bne.n	8000d96 <UartPuts+0xe>
}
 8000db6:	bf00      	nop
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dc0:	480d      	ldr	r0, [pc, #52]	@ (8000df8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dc2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dc4:	f7ff ff26 	bl	8000c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc8:	480c      	ldr	r0, [pc, #48]	@ (8000dfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000dca:	490d      	ldr	r1, [pc, #52]	@ (8000e00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e04 <LoopForever+0xe>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0a      	ldr	r2, [pc, #40]	@ (8000e08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de0:	4c0a      	ldr	r4, [pc, #40]	@ (8000e0c <LoopForever+0x16>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dee:	f000 f837 	bl	8000e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000df2:	f7ff fcaf 	bl	8000754 <main>

08000df6 <LoopForever>:

LoopForever:
  b LoopForever
 8000df6:	e7fe      	b.n	8000df6 <LoopForever>
  ldr   r0, =_estack
 8000df8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000e04:	08001810 	.word	0x08001810
  ldr r2, =_sbss
 8000e08:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000e0c:	200001bc 	.word	0x200001bc

08000e10 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC_IRQHandler>
	...

08000e14 <siprintf>:
 8000e14:	b40e      	push	{r1, r2, r3}
 8000e16:	b500      	push	{lr}
 8000e18:	b09c      	sub	sp, #112	@ 0x70
 8000e1a:	ab1d      	add	r3, sp, #116	@ 0x74
 8000e1c:	9002      	str	r0, [sp, #8]
 8000e1e:	9006      	str	r0, [sp, #24]
 8000e20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000e24:	4809      	ldr	r0, [pc, #36]	@ (8000e4c <siprintf+0x38>)
 8000e26:	9107      	str	r1, [sp, #28]
 8000e28:	9104      	str	r1, [sp, #16]
 8000e2a:	4909      	ldr	r1, [pc, #36]	@ (8000e50 <siprintf+0x3c>)
 8000e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e30:	9105      	str	r1, [sp, #20]
 8000e32:	6800      	ldr	r0, [r0, #0]
 8000e34:	9301      	str	r3, [sp, #4]
 8000e36:	a902      	add	r1, sp, #8
 8000e38:	f000 f98c 	bl	8001154 <_svfiprintf_r>
 8000e3c:	9b02      	ldr	r3, [sp, #8]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
 8000e42:	b01c      	add	sp, #112	@ 0x70
 8000e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8000e48:	b003      	add	sp, #12
 8000e4a:	4770      	bx	lr
 8000e4c:	20000004 	.word	0x20000004
 8000e50:	ffff0208 	.word	0xffff0208

08000e54 <__errno>:
 8000e54:	4b01      	ldr	r3, [pc, #4]	@ (8000e5c <__errno+0x8>)
 8000e56:	6818      	ldr	r0, [r3, #0]
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000004 	.word	0x20000004

08000e60 <__libc_init_array>:
 8000e60:	b570      	push	{r4, r5, r6, lr}
 8000e62:	4d0d      	ldr	r5, [pc, #52]	@ (8000e98 <__libc_init_array+0x38>)
 8000e64:	4c0d      	ldr	r4, [pc, #52]	@ (8000e9c <__libc_init_array+0x3c>)
 8000e66:	1b64      	subs	r4, r4, r5
 8000e68:	10a4      	asrs	r4, r4, #2
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	42a6      	cmp	r6, r4
 8000e6e:	d109      	bne.n	8000e84 <__libc_init_array+0x24>
 8000e70:	4d0b      	ldr	r5, [pc, #44]	@ (8000ea0 <__libc_init_array+0x40>)
 8000e72:	4c0c      	ldr	r4, [pc, #48]	@ (8000ea4 <__libc_init_array+0x44>)
 8000e74:	f000 fc66 	bl	8001744 <_init>
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	10a4      	asrs	r4, r4, #2
 8000e7c:	2600      	movs	r6, #0
 8000e7e:	42a6      	cmp	r6, r4
 8000e80:	d105      	bne.n	8000e8e <__libc_init_array+0x2e>
 8000e82:	bd70      	pop	{r4, r5, r6, pc}
 8000e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e88:	4798      	blx	r3
 8000e8a:	3601      	adds	r6, #1
 8000e8c:	e7ee      	b.n	8000e6c <__libc_init_array+0xc>
 8000e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e92:	4798      	blx	r3
 8000e94:	3601      	adds	r6, #1
 8000e96:	e7f2      	b.n	8000e7e <__libc_init_array+0x1e>
 8000e98:	08001808 	.word	0x08001808
 8000e9c:	08001808 	.word	0x08001808
 8000ea0:	08001808 	.word	0x08001808
 8000ea4:	0800180c 	.word	0x0800180c

08000ea8 <__retarget_lock_acquire_recursive>:
 8000ea8:	4770      	bx	lr

08000eaa <__retarget_lock_release_recursive>:
 8000eaa:	4770      	bx	lr

08000eac <_free_r>:
 8000eac:	b538      	push	{r3, r4, r5, lr}
 8000eae:	4605      	mov	r5, r0
 8000eb0:	2900      	cmp	r1, #0
 8000eb2:	d041      	beq.n	8000f38 <_free_r+0x8c>
 8000eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000eb8:	1f0c      	subs	r4, r1, #4
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	bfb8      	it	lt
 8000ebe:	18e4      	addlt	r4, r4, r3
 8000ec0:	f000 f8e0 	bl	8001084 <__malloc_lock>
 8000ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f3c <_free_r+0x90>)
 8000ec6:	6813      	ldr	r3, [r2, #0]
 8000ec8:	b933      	cbnz	r3, 8000ed8 <_free_r+0x2c>
 8000eca:	6063      	str	r3, [r4, #4]
 8000ecc:	6014      	str	r4, [r2, #0]
 8000ece:	4628      	mov	r0, r5
 8000ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ed4:	f000 b8dc 	b.w	8001090 <__malloc_unlock>
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <_free_r+0x42>
 8000edc:	6820      	ldr	r0, [r4, #0]
 8000ede:	1821      	adds	r1, r4, r0
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	bf01      	itttt	eq
 8000ee4:	6819      	ldreq	r1, [r3, #0]
 8000ee6:	685b      	ldreq	r3, [r3, #4]
 8000ee8:	1809      	addeq	r1, r1, r0
 8000eea:	6021      	streq	r1, [r4, #0]
 8000eec:	e7ed      	b.n	8000eca <_free_r+0x1e>
 8000eee:	461a      	mov	r2, r3
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	b10b      	cbz	r3, 8000ef8 <_free_r+0x4c>
 8000ef4:	42a3      	cmp	r3, r4
 8000ef6:	d9fa      	bls.n	8000eee <_free_r+0x42>
 8000ef8:	6811      	ldr	r1, [r2, #0]
 8000efa:	1850      	adds	r0, r2, r1
 8000efc:	42a0      	cmp	r0, r4
 8000efe:	d10b      	bne.n	8000f18 <_free_r+0x6c>
 8000f00:	6820      	ldr	r0, [r4, #0]
 8000f02:	4401      	add	r1, r0
 8000f04:	1850      	adds	r0, r2, r1
 8000f06:	4283      	cmp	r3, r0
 8000f08:	6011      	str	r1, [r2, #0]
 8000f0a:	d1e0      	bne.n	8000ece <_free_r+0x22>
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	6053      	str	r3, [r2, #4]
 8000f12:	4408      	add	r0, r1
 8000f14:	6010      	str	r0, [r2, #0]
 8000f16:	e7da      	b.n	8000ece <_free_r+0x22>
 8000f18:	d902      	bls.n	8000f20 <_free_r+0x74>
 8000f1a:	230c      	movs	r3, #12
 8000f1c:	602b      	str	r3, [r5, #0]
 8000f1e:	e7d6      	b.n	8000ece <_free_r+0x22>
 8000f20:	6820      	ldr	r0, [r4, #0]
 8000f22:	1821      	adds	r1, r4, r0
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf04      	itt	eq
 8000f28:	6819      	ldreq	r1, [r3, #0]
 8000f2a:	685b      	ldreq	r3, [r3, #4]
 8000f2c:	6063      	str	r3, [r4, #4]
 8000f2e:	bf04      	itt	eq
 8000f30:	1809      	addeq	r1, r1, r0
 8000f32:	6021      	streq	r1, [r4, #0]
 8000f34:	6054      	str	r4, [r2, #4]
 8000f36:	e7ca      	b.n	8000ece <_free_r+0x22>
 8000f38:	bd38      	pop	{r3, r4, r5, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200001b8 	.word	0x200001b8

08000f40 <sbrk_aligned>:
 8000f40:	b570      	push	{r4, r5, r6, lr}
 8000f42:	4e0f      	ldr	r6, [pc, #60]	@ (8000f80 <sbrk_aligned+0x40>)
 8000f44:	460c      	mov	r4, r1
 8000f46:	6831      	ldr	r1, [r6, #0]
 8000f48:	4605      	mov	r5, r0
 8000f4a:	b911      	cbnz	r1, 8000f52 <sbrk_aligned+0x12>
 8000f4c:	f000 fba6 	bl	800169c <_sbrk_r>
 8000f50:	6030      	str	r0, [r6, #0]
 8000f52:	4621      	mov	r1, r4
 8000f54:	4628      	mov	r0, r5
 8000f56:	f000 fba1 	bl	800169c <_sbrk_r>
 8000f5a:	1c43      	adds	r3, r0, #1
 8000f5c:	d103      	bne.n	8000f66 <sbrk_aligned+0x26>
 8000f5e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000f62:	4620      	mov	r0, r4
 8000f64:	bd70      	pop	{r4, r5, r6, pc}
 8000f66:	1cc4      	adds	r4, r0, #3
 8000f68:	f024 0403 	bic.w	r4, r4, #3
 8000f6c:	42a0      	cmp	r0, r4
 8000f6e:	d0f8      	beq.n	8000f62 <sbrk_aligned+0x22>
 8000f70:	1a21      	subs	r1, r4, r0
 8000f72:	4628      	mov	r0, r5
 8000f74:	f000 fb92 	bl	800169c <_sbrk_r>
 8000f78:	3001      	adds	r0, #1
 8000f7a:	d1f2      	bne.n	8000f62 <sbrk_aligned+0x22>
 8000f7c:	e7ef      	b.n	8000f5e <sbrk_aligned+0x1e>
 8000f7e:	bf00      	nop
 8000f80:	200001b4 	.word	0x200001b4

08000f84 <_malloc_r>:
 8000f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f88:	1ccd      	adds	r5, r1, #3
 8000f8a:	f025 0503 	bic.w	r5, r5, #3
 8000f8e:	3508      	adds	r5, #8
 8000f90:	2d0c      	cmp	r5, #12
 8000f92:	bf38      	it	cc
 8000f94:	250c      	movcc	r5, #12
 8000f96:	2d00      	cmp	r5, #0
 8000f98:	4606      	mov	r6, r0
 8000f9a:	db01      	blt.n	8000fa0 <_malloc_r+0x1c>
 8000f9c:	42a9      	cmp	r1, r5
 8000f9e:	d904      	bls.n	8000faa <_malloc_r+0x26>
 8000fa0:	230c      	movs	r3, #12
 8000fa2:	6033      	str	r3, [r6, #0]
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000faa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001080 <_malloc_r+0xfc>
 8000fae:	f000 f869 	bl	8001084 <__malloc_lock>
 8000fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8000fb6:	461c      	mov	r4, r3
 8000fb8:	bb44      	cbnz	r4, 800100c <_malloc_r+0x88>
 8000fba:	4629      	mov	r1, r5
 8000fbc:	4630      	mov	r0, r6
 8000fbe:	f7ff ffbf 	bl	8000f40 <sbrk_aligned>
 8000fc2:	1c43      	adds	r3, r0, #1
 8000fc4:	4604      	mov	r4, r0
 8000fc6:	d158      	bne.n	800107a <_malloc_r+0xf6>
 8000fc8:	f8d8 4000 	ldr.w	r4, [r8]
 8000fcc:	4627      	mov	r7, r4
 8000fce:	2f00      	cmp	r7, #0
 8000fd0:	d143      	bne.n	800105a <_malloc_r+0xd6>
 8000fd2:	2c00      	cmp	r4, #0
 8000fd4:	d04b      	beq.n	800106e <_malloc_r+0xea>
 8000fd6:	6823      	ldr	r3, [r4, #0]
 8000fd8:	4639      	mov	r1, r7
 8000fda:	4630      	mov	r0, r6
 8000fdc:	eb04 0903 	add.w	r9, r4, r3
 8000fe0:	f000 fb5c 	bl	800169c <_sbrk_r>
 8000fe4:	4581      	cmp	r9, r0
 8000fe6:	d142      	bne.n	800106e <_malloc_r+0xea>
 8000fe8:	6821      	ldr	r1, [r4, #0]
 8000fea:	1a6d      	subs	r5, r5, r1
 8000fec:	4629      	mov	r1, r5
 8000fee:	4630      	mov	r0, r6
 8000ff0:	f7ff ffa6 	bl	8000f40 <sbrk_aligned>
 8000ff4:	3001      	adds	r0, #1
 8000ff6:	d03a      	beq.n	800106e <_malloc_r+0xea>
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	442b      	add	r3, r5
 8000ffc:	6023      	str	r3, [r4, #0]
 8000ffe:	f8d8 3000 	ldr.w	r3, [r8]
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	bb62      	cbnz	r2, 8001060 <_malloc_r+0xdc>
 8001006:	f8c8 7000 	str.w	r7, [r8]
 800100a:	e00f      	b.n	800102c <_malloc_r+0xa8>
 800100c:	6822      	ldr	r2, [r4, #0]
 800100e:	1b52      	subs	r2, r2, r5
 8001010:	d420      	bmi.n	8001054 <_malloc_r+0xd0>
 8001012:	2a0b      	cmp	r2, #11
 8001014:	d917      	bls.n	8001046 <_malloc_r+0xc2>
 8001016:	1961      	adds	r1, r4, r5
 8001018:	42a3      	cmp	r3, r4
 800101a:	6025      	str	r5, [r4, #0]
 800101c:	bf18      	it	ne
 800101e:	6059      	strne	r1, [r3, #4]
 8001020:	6863      	ldr	r3, [r4, #4]
 8001022:	bf08      	it	eq
 8001024:	f8c8 1000 	streq.w	r1, [r8]
 8001028:	5162      	str	r2, [r4, r5]
 800102a:	604b      	str	r3, [r1, #4]
 800102c:	4630      	mov	r0, r6
 800102e:	f000 f82f 	bl	8001090 <__malloc_unlock>
 8001032:	f104 000b 	add.w	r0, r4, #11
 8001036:	1d23      	adds	r3, r4, #4
 8001038:	f020 0007 	bic.w	r0, r0, #7
 800103c:	1ac2      	subs	r2, r0, r3
 800103e:	bf1c      	itt	ne
 8001040:	1a1b      	subne	r3, r3, r0
 8001042:	50a3      	strne	r3, [r4, r2]
 8001044:	e7af      	b.n	8000fa6 <_malloc_r+0x22>
 8001046:	6862      	ldr	r2, [r4, #4]
 8001048:	42a3      	cmp	r3, r4
 800104a:	bf0c      	ite	eq
 800104c:	f8c8 2000 	streq.w	r2, [r8]
 8001050:	605a      	strne	r2, [r3, #4]
 8001052:	e7eb      	b.n	800102c <_malloc_r+0xa8>
 8001054:	4623      	mov	r3, r4
 8001056:	6864      	ldr	r4, [r4, #4]
 8001058:	e7ae      	b.n	8000fb8 <_malloc_r+0x34>
 800105a:	463c      	mov	r4, r7
 800105c:	687f      	ldr	r7, [r7, #4]
 800105e:	e7b6      	b.n	8000fce <_malloc_r+0x4a>
 8001060:	461a      	mov	r2, r3
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	42a3      	cmp	r3, r4
 8001066:	d1fb      	bne.n	8001060 <_malloc_r+0xdc>
 8001068:	2300      	movs	r3, #0
 800106a:	6053      	str	r3, [r2, #4]
 800106c:	e7de      	b.n	800102c <_malloc_r+0xa8>
 800106e:	230c      	movs	r3, #12
 8001070:	6033      	str	r3, [r6, #0]
 8001072:	4630      	mov	r0, r6
 8001074:	f000 f80c 	bl	8001090 <__malloc_unlock>
 8001078:	e794      	b.n	8000fa4 <_malloc_r+0x20>
 800107a:	6005      	str	r5, [r0, #0]
 800107c:	e7d6      	b.n	800102c <_malloc_r+0xa8>
 800107e:	bf00      	nop
 8001080:	200001b8 	.word	0x200001b8

08001084 <__malloc_lock>:
 8001084:	4801      	ldr	r0, [pc, #4]	@ (800108c <__malloc_lock+0x8>)
 8001086:	f7ff bf0f 	b.w	8000ea8 <__retarget_lock_acquire_recursive>
 800108a:	bf00      	nop
 800108c:	200001b0 	.word	0x200001b0

08001090 <__malloc_unlock>:
 8001090:	4801      	ldr	r0, [pc, #4]	@ (8001098 <__malloc_unlock+0x8>)
 8001092:	f7ff bf0a 	b.w	8000eaa <__retarget_lock_release_recursive>
 8001096:	bf00      	nop
 8001098:	200001b0 	.word	0x200001b0

0800109c <__ssputs_r>:
 800109c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010a0:	688e      	ldr	r6, [r1, #8]
 80010a2:	461f      	mov	r7, r3
 80010a4:	42be      	cmp	r6, r7
 80010a6:	680b      	ldr	r3, [r1, #0]
 80010a8:	4682      	mov	sl, r0
 80010aa:	460c      	mov	r4, r1
 80010ac:	4690      	mov	r8, r2
 80010ae:	d82d      	bhi.n	800110c <__ssputs_r+0x70>
 80010b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80010b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80010b8:	d026      	beq.n	8001108 <__ssputs_r+0x6c>
 80010ba:	6965      	ldr	r5, [r4, #20]
 80010bc:	6909      	ldr	r1, [r1, #16]
 80010be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80010c2:	eba3 0901 	sub.w	r9, r3, r1
 80010c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80010ca:	1c7b      	adds	r3, r7, #1
 80010cc:	444b      	add	r3, r9
 80010ce:	106d      	asrs	r5, r5, #1
 80010d0:	429d      	cmp	r5, r3
 80010d2:	bf38      	it	cc
 80010d4:	461d      	movcc	r5, r3
 80010d6:	0553      	lsls	r3, r2, #21
 80010d8:	d527      	bpl.n	800112a <__ssputs_r+0x8e>
 80010da:	4629      	mov	r1, r5
 80010dc:	f7ff ff52 	bl	8000f84 <_malloc_r>
 80010e0:	4606      	mov	r6, r0
 80010e2:	b360      	cbz	r0, 800113e <__ssputs_r+0xa2>
 80010e4:	6921      	ldr	r1, [r4, #16]
 80010e6:	464a      	mov	r2, r9
 80010e8:	f000 fae8 	bl	80016bc <memcpy>
 80010ec:	89a3      	ldrh	r3, [r4, #12]
 80010ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80010f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010f6:	81a3      	strh	r3, [r4, #12]
 80010f8:	6126      	str	r6, [r4, #16]
 80010fa:	6165      	str	r5, [r4, #20]
 80010fc:	444e      	add	r6, r9
 80010fe:	eba5 0509 	sub.w	r5, r5, r9
 8001102:	6026      	str	r6, [r4, #0]
 8001104:	60a5      	str	r5, [r4, #8]
 8001106:	463e      	mov	r6, r7
 8001108:	42be      	cmp	r6, r7
 800110a:	d900      	bls.n	800110e <__ssputs_r+0x72>
 800110c:	463e      	mov	r6, r7
 800110e:	6820      	ldr	r0, [r4, #0]
 8001110:	4632      	mov	r2, r6
 8001112:	4641      	mov	r1, r8
 8001114:	f000 faa8 	bl	8001668 <memmove>
 8001118:	68a3      	ldr	r3, [r4, #8]
 800111a:	1b9b      	subs	r3, r3, r6
 800111c:	60a3      	str	r3, [r4, #8]
 800111e:	6823      	ldr	r3, [r4, #0]
 8001120:	4433      	add	r3, r6
 8001122:	6023      	str	r3, [r4, #0]
 8001124:	2000      	movs	r0, #0
 8001126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800112a:	462a      	mov	r2, r5
 800112c:	f000 fad4 	bl	80016d8 <_realloc_r>
 8001130:	4606      	mov	r6, r0
 8001132:	2800      	cmp	r0, #0
 8001134:	d1e0      	bne.n	80010f8 <__ssputs_r+0x5c>
 8001136:	6921      	ldr	r1, [r4, #16]
 8001138:	4650      	mov	r0, sl
 800113a:	f7ff feb7 	bl	8000eac <_free_r>
 800113e:	230c      	movs	r3, #12
 8001140:	f8ca 3000 	str.w	r3, [sl]
 8001144:	89a3      	ldrh	r3, [r4, #12]
 8001146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800114a:	81a3      	strh	r3, [r4, #12]
 800114c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001150:	e7e9      	b.n	8001126 <__ssputs_r+0x8a>
	...

08001154 <_svfiprintf_r>:
 8001154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001158:	4698      	mov	r8, r3
 800115a:	898b      	ldrh	r3, [r1, #12]
 800115c:	061b      	lsls	r3, r3, #24
 800115e:	b09d      	sub	sp, #116	@ 0x74
 8001160:	4607      	mov	r7, r0
 8001162:	460d      	mov	r5, r1
 8001164:	4614      	mov	r4, r2
 8001166:	d510      	bpl.n	800118a <_svfiprintf_r+0x36>
 8001168:	690b      	ldr	r3, [r1, #16]
 800116a:	b973      	cbnz	r3, 800118a <_svfiprintf_r+0x36>
 800116c:	2140      	movs	r1, #64	@ 0x40
 800116e:	f7ff ff09 	bl	8000f84 <_malloc_r>
 8001172:	6028      	str	r0, [r5, #0]
 8001174:	6128      	str	r0, [r5, #16]
 8001176:	b930      	cbnz	r0, 8001186 <_svfiprintf_r+0x32>
 8001178:	230c      	movs	r3, #12
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001180:	b01d      	add	sp, #116	@ 0x74
 8001182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001186:	2340      	movs	r3, #64	@ 0x40
 8001188:	616b      	str	r3, [r5, #20]
 800118a:	2300      	movs	r3, #0
 800118c:	9309      	str	r3, [sp, #36]	@ 0x24
 800118e:	2320      	movs	r3, #32
 8001190:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001194:	f8cd 800c 	str.w	r8, [sp, #12]
 8001198:	2330      	movs	r3, #48	@ 0x30
 800119a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001338 <_svfiprintf_r+0x1e4>
 800119e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80011a2:	f04f 0901 	mov.w	r9, #1
 80011a6:	4623      	mov	r3, r4
 80011a8:	469a      	mov	sl, r3
 80011aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80011ae:	b10a      	cbz	r2, 80011b4 <_svfiprintf_r+0x60>
 80011b0:	2a25      	cmp	r2, #37	@ 0x25
 80011b2:	d1f9      	bne.n	80011a8 <_svfiprintf_r+0x54>
 80011b4:	ebba 0b04 	subs.w	fp, sl, r4
 80011b8:	d00b      	beq.n	80011d2 <_svfiprintf_r+0x7e>
 80011ba:	465b      	mov	r3, fp
 80011bc:	4622      	mov	r2, r4
 80011be:	4629      	mov	r1, r5
 80011c0:	4638      	mov	r0, r7
 80011c2:	f7ff ff6b 	bl	800109c <__ssputs_r>
 80011c6:	3001      	adds	r0, #1
 80011c8:	f000 80a7 	beq.w	800131a <_svfiprintf_r+0x1c6>
 80011cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80011ce:	445a      	add	r2, fp
 80011d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80011d2:	f89a 3000 	ldrb.w	r3, [sl]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 809f 	beq.w	800131a <_svfiprintf_r+0x1c6>
 80011dc:	2300      	movs	r3, #0
 80011de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80011e6:	f10a 0a01 	add.w	sl, sl, #1
 80011ea:	9304      	str	r3, [sp, #16]
 80011ec:	9307      	str	r3, [sp, #28]
 80011ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80011f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80011f4:	4654      	mov	r4, sl
 80011f6:	2205      	movs	r2, #5
 80011f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011fc:	484e      	ldr	r0, [pc, #312]	@ (8001338 <_svfiprintf_r+0x1e4>)
 80011fe:	f7fe ffe7 	bl	80001d0 <memchr>
 8001202:	9a04      	ldr	r2, [sp, #16]
 8001204:	b9d8      	cbnz	r0, 800123e <_svfiprintf_r+0xea>
 8001206:	06d0      	lsls	r0, r2, #27
 8001208:	bf44      	itt	mi
 800120a:	2320      	movmi	r3, #32
 800120c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001210:	0711      	lsls	r1, r2, #28
 8001212:	bf44      	itt	mi
 8001214:	232b      	movmi	r3, #43	@ 0x2b
 8001216:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800121a:	f89a 3000 	ldrb.w	r3, [sl]
 800121e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001220:	d015      	beq.n	800124e <_svfiprintf_r+0xfa>
 8001222:	9a07      	ldr	r2, [sp, #28]
 8001224:	4654      	mov	r4, sl
 8001226:	2000      	movs	r0, #0
 8001228:	f04f 0c0a 	mov.w	ip, #10
 800122c:	4621      	mov	r1, r4
 800122e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001232:	3b30      	subs	r3, #48	@ 0x30
 8001234:	2b09      	cmp	r3, #9
 8001236:	d94b      	bls.n	80012d0 <_svfiprintf_r+0x17c>
 8001238:	b1b0      	cbz	r0, 8001268 <_svfiprintf_r+0x114>
 800123a:	9207      	str	r2, [sp, #28]
 800123c:	e014      	b.n	8001268 <_svfiprintf_r+0x114>
 800123e:	eba0 0308 	sub.w	r3, r0, r8
 8001242:	fa09 f303 	lsl.w	r3, r9, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	9304      	str	r3, [sp, #16]
 800124a:	46a2      	mov	sl, r4
 800124c:	e7d2      	b.n	80011f4 <_svfiprintf_r+0xa0>
 800124e:	9b03      	ldr	r3, [sp, #12]
 8001250:	1d19      	adds	r1, r3, #4
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	9103      	str	r1, [sp, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	bfbb      	ittet	lt
 800125a:	425b      	neglt	r3, r3
 800125c:	f042 0202 	orrlt.w	r2, r2, #2
 8001260:	9307      	strge	r3, [sp, #28]
 8001262:	9307      	strlt	r3, [sp, #28]
 8001264:	bfb8      	it	lt
 8001266:	9204      	strlt	r2, [sp, #16]
 8001268:	7823      	ldrb	r3, [r4, #0]
 800126a:	2b2e      	cmp	r3, #46	@ 0x2e
 800126c:	d10a      	bne.n	8001284 <_svfiprintf_r+0x130>
 800126e:	7863      	ldrb	r3, [r4, #1]
 8001270:	2b2a      	cmp	r3, #42	@ 0x2a
 8001272:	d132      	bne.n	80012da <_svfiprintf_r+0x186>
 8001274:	9b03      	ldr	r3, [sp, #12]
 8001276:	1d1a      	adds	r2, r3, #4
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	9203      	str	r2, [sp, #12]
 800127c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001280:	3402      	adds	r4, #2
 8001282:	9305      	str	r3, [sp, #20]
 8001284:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800133c <_svfiprintf_r+0x1e8>
 8001288:	7821      	ldrb	r1, [r4, #0]
 800128a:	2203      	movs	r2, #3
 800128c:	4650      	mov	r0, sl
 800128e:	f7fe ff9f 	bl	80001d0 <memchr>
 8001292:	b138      	cbz	r0, 80012a4 <_svfiprintf_r+0x150>
 8001294:	9b04      	ldr	r3, [sp, #16]
 8001296:	eba0 000a 	sub.w	r0, r0, sl
 800129a:	2240      	movs	r2, #64	@ 0x40
 800129c:	4082      	lsls	r2, r0
 800129e:	4313      	orrs	r3, r2
 80012a0:	3401      	adds	r4, #1
 80012a2:	9304      	str	r3, [sp, #16]
 80012a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012a8:	4825      	ldr	r0, [pc, #148]	@ (8001340 <_svfiprintf_r+0x1ec>)
 80012aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80012ae:	2206      	movs	r2, #6
 80012b0:	f7fe ff8e 	bl	80001d0 <memchr>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d036      	beq.n	8001326 <_svfiprintf_r+0x1d2>
 80012b8:	4b22      	ldr	r3, [pc, #136]	@ (8001344 <_svfiprintf_r+0x1f0>)
 80012ba:	bb1b      	cbnz	r3, 8001304 <_svfiprintf_r+0x1b0>
 80012bc:	9b03      	ldr	r3, [sp, #12]
 80012be:	3307      	adds	r3, #7
 80012c0:	f023 0307 	bic.w	r3, r3, #7
 80012c4:	3308      	adds	r3, #8
 80012c6:	9303      	str	r3, [sp, #12]
 80012c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80012ca:	4433      	add	r3, r6
 80012cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80012ce:	e76a      	b.n	80011a6 <_svfiprintf_r+0x52>
 80012d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80012d4:	460c      	mov	r4, r1
 80012d6:	2001      	movs	r0, #1
 80012d8:	e7a8      	b.n	800122c <_svfiprintf_r+0xd8>
 80012da:	2300      	movs	r3, #0
 80012dc:	3401      	adds	r4, #1
 80012de:	9305      	str	r3, [sp, #20]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 0c0a 	mov.w	ip, #10
 80012e6:	4620      	mov	r0, r4
 80012e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80012ec:	3a30      	subs	r2, #48	@ 0x30
 80012ee:	2a09      	cmp	r2, #9
 80012f0:	d903      	bls.n	80012fa <_svfiprintf_r+0x1a6>
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0c6      	beq.n	8001284 <_svfiprintf_r+0x130>
 80012f6:	9105      	str	r1, [sp, #20]
 80012f8:	e7c4      	b.n	8001284 <_svfiprintf_r+0x130>
 80012fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80012fe:	4604      	mov	r4, r0
 8001300:	2301      	movs	r3, #1
 8001302:	e7f0      	b.n	80012e6 <_svfiprintf_r+0x192>
 8001304:	ab03      	add	r3, sp, #12
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	462a      	mov	r2, r5
 800130a:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <_svfiprintf_r+0x1f4>)
 800130c:	a904      	add	r1, sp, #16
 800130e:	4638      	mov	r0, r7
 8001310:	f3af 8000 	nop.w
 8001314:	1c42      	adds	r2, r0, #1
 8001316:	4606      	mov	r6, r0
 8001318:	d1d6      	bne.n	80012c8 <_svfiprintf_r+0x174>
 800131a:	89ab      	ldrh	r3, [r5, #12]
 800131c:	065b      	lsls	r3, r3, #25
 800131e:	f53f af2d 	bmi.w	800117c <_svfiprintf_r+0x28>
 8001322:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001324:	e72c      	b.n	8001180 <_svfiprintf_r+0x2c>
 8001326:	ab03      	add	r3, sp, #12
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	462a      	mov	r2, r5
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <_svfiprintf_r+0x1f4>)
 800132e:	a904      	add	r1, sp, #16
 8001330:	4638      	mov	r0, r7
 8001332:	f000 f879 	bl	8001428 <_printf_i>
 8001336:	e7ed      	b.n	8001314 <_svfiprintf_r+0x1c0>
 8001338:	080017cb 	.word	0x080017cb
 800133c:	080017d1 	.word	0x080017d1
 8001340:	080017d5 	.word	0x080017d5
 8001344:	00000000 	.word	0x00000000
 8001348:	0800109d 	.word	0x0800109d

0800134c <_printf_common>:
 800134c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001350:	4616      	mov	r6, r2
 8001352:	4698      	mov	r8, r3
 8001354:	688a      	ldr	r2, [r1, #8]
 8001356:	690b      	ldr	r3, [r1, #16]
 8001358:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800135c:	4293      	cmp	r3, r2
 800135e:	bfb8      	it	lt
 8001360:	4613      	movlt	r3, r2
 8001362:	6033      	str	r3, [r6, #0]
 8001364:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001368:	4607      	mov	r7, r0
 800136a:	460c      	mov	r4, r1
 800136c:	b10a      	cbz	r2, 8001372 <_printf_common+0x26>
 800136e:	3301      	adds	r3, #1
 8001370:	6033      	str	r3, [r6, #0]
 8001372:	6823      	ldr	r3, [r4, #0]
 8001374:	0699      	lsls	r1, r3, #26
 8001376:	bf42      	ittt	mi
 8001378:	6833      	ldrmi	r3, [r6, #0]
 800137a:	3302      	addmi	r3, #2
 800137c:	6033      	strmi	r3, [r6, #0]
 800137e:	6825      	ldr	r5, [r4, #0]
 8001380:	f015 0506 	ands.w	r5, r5, #6
 8001384:	d106      	bne.n	8001394 <_printf_common+0x48>
 8001386:	f104 0a19 	add.w	sl, r4, #25
 800138a:	68e3      	ldr	r3, [r4, #12]
 800138c:	6832      	ldr	r2, [r6, #0]
 800138e:	1a9b      	subs	r3, r3, r2
 8001390:	42ab      	cmp	r3, r5
 8001392:	dc26      	bgt.n	80013e2 <_printf_common+0x96>
 8001394:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001398:	6822      	ldr	r2, [r4, #0]
 800139a:	3b00      	subs	r3, #0
 800139c:	bf18      	it	ne
 800139e:	2301      	movne	r3, #1
 80013a0:	0692      	lsls	r2, r2, #26
 80013a2:	d42b      	bmi.n	80013fc <_printf_common+0xb0>
 80013a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80013a8:	4641      	mov	r1, r8
 80013aa:	4638      	mov	r0, r7
 80013ac:	47c8      	blx	r9
 80013ae:	3001      	adds	r0, #1
 80013b0:	d01e      	beq.n	80013f0 <_printf_common+0xa4>
 80013b2:	6823      	ldr	r3, [r4, #0]
 80013b4:	6922      	ldr	r2, [r4, #16]
 80013b6:	f003 0306 	and.w	r3, r3, #6
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	bf02      	ittt	eq
 80013be:	68e5      	ldreq	r5, [r4, #12]
 80013c0:	6833      	ldreq	r3, [r6, #0]
 80013c2:	1aed      	subeq	r5, r5, r3
 80013c4:	68a3      	ldr	r3, [r4, #8]
 80013c6:	bf0c      	ite	eq
 80013c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80013cc:	2500      	movne	r5, #0
 80013ce:	4293      	cmp	r3, r2
 80013d0:	bfc4      	itt	gt
 80013d2:	1a9b      	subgt	r3, r3, r2
 80013d4:	18ed      	addgt	r5, r5, r3
 80013d6:	2600      	movs	r6, #0
 80013d8:	341a      	adds	r4, #26
 80013da:	42b5      	cmp	r5, r6
 80013dc:	d11a      	bne.n	8001414 <_printf_common+0xc8>
 80013de:	2000      	movs	r0, #0
 80013e0:	e008      	b.n	80013f4 <_printf_common+0xa8>
 80013e2:	2301      	movs	r3, #1
 80013e4:	4652      	mov	r2, sl
 80013e6:	4641      	mov	r1, r8
 80013e8:	4638      	mov	r0, r7
 80013ea:	47c8      	blx	r9
 80013ec:	3001      	adds	r0, #1
 80013ee:	d103      	bne.n	80013f8 <_printf_common+0xac>
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013f8:	3501      	adds	r5, #1
 80013fa:	e7c6      	b.n	800138a <_printf_common+0x3e>
 80013fc:	18e1      	adds	r1, r4, r3
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	2030      	movs	r0, #48	@ 0x30
 8001402:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001406:	4422      	add	r2, r4
 8001408:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800140c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001410:	3302      	adds	r3, #2
 8001412:	e7c7      	b.n	80013a4 <_printf_common+0x58>
 8001414:	2301      	movs	r3, #1
 8001416:	4622      	mov	r2, r4
 8001418:	4641      	mov	r1, r8
 800141a:	4638      	mov	r0, r7
 800141c:	47c8      	blx	r9
 800141e:	3001      	adds	r0, #1
 8001420:	d0e6      	beq.n	80013f0 <_printf_common+0xa4>
 8001422:	3601      	adds	r6, #1
 8001424:	e7d9      	b.n	80013da <_printf_common+0x8e>
	...

08001428 <_printf_i>:
 8001428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800142c:	7e0f      	ldrb	r7, [r1, #24]
 800142e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001430:	2f78      	cmp	r7, #120	@ 0x78
 8001432:	4691      	mov	r9, r2
 8001434:	4680      	mov	r8, r0
 8001436:	460c      	mov	r4, r1
 8001438:	469a      	mov	sl, r3
 800143a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800143e:	d807      	bhi.n	8001450 <_printf_i+0x28>
 8001440:	2f62      	cmp	r7, #98	@ 0x62
 8001442:	d80a      	bhi.n	800145a <_printf_i+0x32>
 8001444:	2f00      	cmp	r7, #0
 8001446:	f000 80d2 	beq.w	80015ee <_printf_i+0x1c6>
 800144a:	2f58      	cmp	r7, #88	@ 0x58
 800144c:	f000 80b9 	beq.w	80015c2 <_printf_i+0x19a>
 8001450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001454:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001458:	e03a      	b.n	80014d0 <_printf_i+0xa8>
 800145a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800145e:	2b15      	cmp	r3, #21
 8001460:	d8f6      	bhi.n	8001450 <_printf_i+0x28>
 8001462:	a101      	add	r1, pc, #4	@ (adr r1, 8001468 <_printf_i+0x40>)
 8001464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001468:	080014c1 	.word	0x080014c1
 800146c:	080014d5 	.word	0x080014d5
 8001470:	08001451 	.word	0x08001451
 8001474:	08001451 	.word	0x08001451
 8001478:	08001451 	.word	0x08001451
 800147c:	08001451 	.word	0x08001451
 8001480:	080014d5 	.word	0x080014d5
 8001484:	08001451 	.word	0x08001451
 8001488:	08001451 	.word	0x08001451
 800148c:	08001451 	.word	0x08001451
 8001490:	08001451 	.word	0x08001451
 8001494:	080015d5 	.word	0x080015d5
 8001498:	080014ff 	.word	0x080014ff
 800149c:	0800158f 	.word	0x0800158f
 80014a0:	08001451 	.word	0x08001451
 80014a4:	08001451 	.word	0x08001451
 80014a8:	080015f7 	.word	0x080015f7
 80014ac:	08001451 	.word	0x08001451
 80014b0:	080014ff 	.word	0x080014ff
 80014b4:	08001451 	.word	0x08001451
 80014b8:	08001451 	.word	0x08001451
 80014bc:	08001597 	.word	0x08001597
 80014c0:	6833      	ldr	r3, [r6, #0]
 80014c2:	1d1a      	adds	r2, r3, #4
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6032      	str	r2, [r6, #0]
 80014c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80014cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80014d0:	2301      	movs	r3, #1
 80014d2:	e09d      	b.n	8001610 <_printf_i+0x1e8>
 80014d4:	6833      	ldr	r3, [r6, #0]
 80014d6:	6820      	ldr	r0, [r4, #0]
 80014d8:	1d19      	adds	r1, r3, #4
 80014da:	6031      	str	r1, [r6, #0]
 80014dc:	0606      	lsls	r6, r0, #24
 80014de:	d501      	bpl.n	80014e4 <_printf_i+0xbc>
 80014e0:	681d      	ldr	r5, [r3, #0]
 80014e2:	e003      	b.n	80014ec <_printf_i+0xc4>
 80014e4:	0645      	lsls	r5, r0, #25
 80014e6:	d5fb      	bpl.n	80014e0 <_printf_i+0xb8>
 80014e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80014ec:	2d00      	cmp	r5, #0
 80014ee:	da03      	bge.n	80014f8 <_printf_i+0xd0>
 80014f0:	232d      	movs	r3, #45	@ 0x2d
 80014f2:	426d      	negs	r5, r5
 80014f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80014f8:	4859      	ldr	r0, [pc, #356]	@ (8001660 <_printf_i+0x238>)
 80014fa:	230a      	movs	r3, #10
 80014fc:	e011      	b.n	8001522 <_printf_i+0xfa>
 80014fe:	6821      	ldr	r1, [r4, #0]
 8001500:	6833      	ldr	r3, [r6, #0]
 8001502:	0608      	lsls	r0, r1, #24
 8001504:	f853 5b04 	ldr.w	r5, [r3], #4
 8001508:	d402      	bmi.n	8001510 <_printf_i+0xe8>
 800150a:	0649      	lsls	r1, r1, #25
 800150c:	bf48      	it	mi
 800150e:	b2ad      	uxthmi	r5, r5
 8001510:	2f6f      	cmp	r7, #111	@ 0x6f
 8001512:	4853      	ldr	r0, [pc, #332]	@ (8001660 <_printf_i+0x238>)
 8001514:	6033      	str	r3, [r6, #0]
 8001516:	bf14      	ite	ne
 8001518:	230a      	movne	r3, #10
 800151a:	2308      	moveq	r3, #8
 800151c:	2100      	movs	r1, #0
 800151e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001522:	6866      	ldr	r6, [r4, #4]
 8001524:	60a6      	str	r6, [r4, #8]
 8001526:	2e00      	cmp	r6, #0
 8001528:	bfa2      	ittt	ge
 800152a:	6821      	ldrge	r1, [r4, #0]
 800152c:	f021 0104 	bicge.w	r1, r1, #4
 8001530:	6021      	strge	r1, [r4, #0]
 8001532:	b90d      	cbnz	r5, 8001538 <_printf_i+0x110>
 8001534:	2e00      	cmp	r6, #0
 8001536:	d04b      	beq.n	80015d0 <_printf_i+0x1a8>
 8001538:	4616      	mov	r6, r2
 800153a:	fbb5 f1f3 	udiv	r1, r5, r3
 800153e:	fb03 5711 	mls	r7, r3, r1, r5
 8001542:	5dc7      	ldrb	r7, [r0, r7]
 8001544:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001548:	462f      	mov	r7, r5
 800154a:	42bb      	cmp	r3, r7
 800154c:	460d      	mov	r5, r1
 800154e:	d9f4      	bls.n	800153a <_printf_i+0x112>
 8001550:	2b08      	cmp	r3, #8
 8001552:	d10b      	bne.n	800156c <_printf_i+0x144>
 8001554:	6823      	ldr	r3, [r4, #0]
 8001556:	07df      	lsls	r7, r3, #31
 8001558:	d508      	bpl.n	800156c <_printf_i+0x144>
 800155a:	6923      	ldr	r3, [r4, #16]
 800155c:	6861      	ldr	r1, [r4, #4]
 800155e:	4299      	cmp	r1, r3
 8001560:	bfde      	ittt	le
 8001562:	2330      	movle	r3, #48	@ 0x30
 8001564:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001568:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800156c:	1b92      	subs	r2, r2, r6
 800156e:	6122      	str	r2, [r4, #16]
 8001570:	f8cd a000 	str.w	sl, [sp]
 8001574:	464b      	mov	r3, r9
 8001576:	aa03      	add	r2, sp, #12
 8001578:	4621      	mov	r1, r4
 800157a:	4640      	mov	r0, r8
 800157c:	f7ff fee6 	bl	800134c <_printf_common>
 8001580:	3001      	adds	r0, #1
 8001582:	d14a      	bne.n	800161a <_printf_i+0x1f2>
 8001584:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001588:	b004      	add	sp, #16
 800158a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800158e:	6823      	ldr	r3, [r4, #0]
 8001590:	f043 0320 	orr.w	r3, r3, #32
 8001594:	6023      	str	r3, [r4, #0]
 8001596:	4833      	ldr	r0, [pc, #204]	@ (8001664 <_printf_i+0x23c>)
 8001598:	2778      	movs	r7, #120	@ 0x78
 800159a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	6831      	ldr	r1, [r6, #0]
 80015a2:	061f      	lsls	r7, r3, #24
 80015a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80015a8:	d402      	bmi.n	80015b0 <_printf_i+0x188>
 80015aa:	065f      	lsls	r7, r3, #25
 80015ac:	bf48      	it	mi
 80015ae:	b2ad      	uxthmi	r5, r5
 80015b0:	6031      	str	r1, [r6, #0]
 80015b2:	07d9      	lsls	r1, r3, #31
 80015b4:	bf44      	itt	mi
 80015b6:	f043 0320 	orrmi.w	r3, r3, #32
 80015ba:	6023      	strmi	r3, [r4, #0]
 80015bc:	b11d      	cbz	r5, 80015c6 <_printf_i+0x19e>
 80015be:	2310      	movs	r3, #16
 80015c0:	e7ac      	b.n	800151c <_printf_i+0xf4>
 80015c2:	4827      	ldr	r0, [pc, #156]	@ (8001660 <_printf_i+0x238>)
 80015c4:	e7e9      	b.n	800159a <_printf_i+0x172>
 80015c6:	6823      	ldr	r3, [r4, #0]
 80015c8:	f023 0320 	bic.w	r3, r3, #32
 80015cc:	6023      	str	r3, [r4, #0]
 80015ce:	e7f6      	b.n	80015be <_printf_i+0x196>
 80015d0:	4616      	mov	r6, r2
 80015d2:	e7bd      	b.n	8001550 <_printf_i+0x128>
 80015d4:	6833      	ldr	r3, [r6, #0]
 80015d6:	6825      	ldr	r5, [r4, #0]
 80015d8:	6961      	ldr	r1, [r4, #20]
 80015da:	1d18      	adds	r0, r3, #4
 80015dc:	6030      	str	r0, [r6, #0]
 80015de:	062e      	lsls	r6, r5, #24
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	d501      	bpl.n	80015e8 <_printf_i+0x1c0>
 80015e4:	6019      	str	r1, [r3, #0]
 80015e6:	e002      	b.n	80015ee <_printf_i+0x1c6>
 80015e8:	0668      	lsls	r0, r5, #25
 80015ea:	d5fb      	bpl.n	80015e4 <_printf_i+0x1bc>
 80015ec:	8019      	strh	r1, [r3, #0]
 80015ee:	2300      	movs	r3, #0
 80015f0:	6123      	str	r3, [r4, #16]
 80015f2:	4616      	mov	r6, r2
 80015f4:	e7bc      	b.n	8001570 <_printf_i+0x148>
 80015f6:	6833      	ldr	r3, [r6, #0]
 80015f8:	1d1a      	adds	r2, r3, #4
 80015fa:	6032      	str	r2, [r6, #0]
 80015fc:	681e      	ldr	r6, [r3, #0]
 80015fe:	6862      	ldr	r2, [r4, #4]
 8001600:	2100      	movs	r1, #0
 8001602:	4630      	mov	r0, r6
 8001604:	f7fe fde4 	bl	80001d0 <memchr>
 8001608:	b108      	cbz	r0, 800160e <_printf_i+0x1e6>
 800160a:	1b80      	subs	r0, r0, r6
 800160c:	6060      	str	r0, [r4, #4]
 800160e:	6863      	ldr	r3, [r4, #4]
 8001610:	6123      	str	r3, [r4, #16]
 8001612:	2300      	movs	r3, #0
 8001614:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001618:	e7aa      	b.n	8001570 <_printf_i+0x148>
 800161a:	6923      	ldr	r3, [r4, #16]
 800161c:	4632      	mov	r2, r6
 800161e:	4649      	mov	r1, r9
 8001620:	4640      	mov	r0, r8
 8001622:	47d0      	blx	sl
 8001624:	3001      	adds	r0, #1
 8001626:	d0ad      	beq.n	8001584 <_printf_i+0x15c>
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	079b      	lsls	r3, r3, #30
 800162c:	d413      	bmi.n	8001656 <_printf_i+0x22e>
 800162e:	68e0      	ldr	r0, [r4, #12]
 8001630:	9b03      	ldr	r3, [sp, #12]
 8001632:	4298      	cmp	r0, r3
 8001634:	bfb8      	it	lt
 8001636:	4618      	movlt	r0, r3
 8001638:	e7a6      	b.n	8001588 <_printf_i+0x160>
 800163a:	2301      	movs	r3, #1
 800163c:	4632      	mov	r2, r6
 800163e:	4649      	mov	r1, r9
 8001640:	4640      	mov	r0, r8
 8001642:	47d0      	blx	sl
 8001644:	3001      	adds	r0, #1
 8001646:	d09d      	beq.n	8001584 <_printf_i+0x15c>
 8001648:	3501      	adds	r5, #1
 800164a:	68e3      	ldr	r3, [r4, #12]
 800164c:	9903      	ldr	r1, [sp, #12]
 800164e:	1a5b      	subs	r3, r3, r1
 8001650:	42ab      	cmp	r3, r5
 8001652:	dcf2      	bgt.n	800163a <_printf_i+0x212>
 8001654:	e7eb      	b.n	800162e <_printf_i+0x206>
 8001656:	2500      	movs	r5, #0
 8001658:	f104 0619 	add.w	r6, r4, #25
 800165c:	e7f5      	b.n	800164a <_printf_i+0x222>
 800165e:	bf00      	nop
 8001660:	080017dc 	.word	0x080017dc
 8001664:	080017ed 	.word	0x080017ed

08001668 <memmove>:
 8001668:	4288      	cmp	r0, r1
 800166a:	b510      	push	{r4, lr}
 800166c:	eb01 0402 	add.w	r4, r1, r2
 8001670:	d902      	bls.n	8001678 <memmove+0x10>
 8001672:	4284      	cmp	r4, r0
 8001674:	4623      	mov	r3, r4
 8001676:	d807      	bhi.n	8001688 <memmove+0x20>
 8001678:	1e43      	subs	r3, r0, #1
 800167a:	42a1      	cmp	r1, r4
 800167c:	d008      	beq.n	8001690 <memmove+0x28>
 800167e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001682:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001686:	e7f8      	b.n	800167a <memmove+0x12>
 8001688:	4402      	add	r2, r0
 800168a:	4601      	mov	r1, r0
 800168c:	428a      	cmp	r2, r1
 800168e:	d100      	bne.n	8001692 <memmove+0x2a>
 8001690:	bd10      	pop	{r4, pc}
 8001692:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001696:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800169a:	e7f7      	b.n	800168c <memmove+0x24>

0800169c <_sbrk_r>:
 800169c:	b538      	push	{r3, r4, r5, lr}
 800169e:	4d06      	ldr	r5, [pc, #24]	@ (80016b8 <_sbrk_r+0x1c>)
 80016a0:	2300      	movs	r3, #0
 80016a2:	4604      	mov	r4, r0
 80016a4:	4608      	mov	r0, r1
 80016a6:	602b      	str	r3, [r5, #0]
 80016a8:	f7ff fa7e 	bl	8000ba8 <_sbrk>
 80016ac:	1c43      	adds	r3, r0, #1
 80016ae:	d102      	bne.n	80016b6 <_sbrk_r+0x1a>
 80016b0:	682b      	ldr	r3, [r5, #0]
 80016b2:	b103      	cbz	r3, 80016b6 <_sbrk_r+0x1a>
 80016b4:	6023      	str	r3, [r4, #0]
 80016b6:	bd38      	pop	{r3, r4, r5, pc}
 80016b8:	200001ac 	.word	0x200001ac

080016bc <memcpy>:
 80016bc:	440a      	add	r2, r1
 80016be:	4291      	cmp	r1, r2
 80016c0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80016c4:	d100      	bne.n	80016c8 <memcpy+0xc>
 80016c6:	4770      	bx	lr
 80016c8:	b510      	push	{r4, lr}
 80016ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80016ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80016d2:	4291      	cmp	r1, r2
 80016d4:	d1f9      	bne.n	80016ca <memcpy+0xe>
 80016d6:	bd10      	pop	{r4, pc}

080016d8 <_realloc_r>:
 80016d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016dc:	4680      	mov	r8, r0
 80016de:	4615      	mov	r5, r2
 80016e0:	460c      	mov	r4, r1
 80016e2:	b921      	cbnz	r1, 80016ee <_realloc_r+0x16>
 80016e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80016e8:	4611      	mov	r1, r2
 80016ea:	f7ff bc4b 	b.w	8000f84 <_malloc_r>
 80016ee:	b92a      	cbnz	r2, 80016fc <_realloc_r+0x24>
 80016f0:	f7ff fbdc 	bl	8000eac <_free_r>
 80016f4:	2400      	movs	r4, #0
 80016f6:	4620      	mov	r0, r4
 80016f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016fc:	f000 f81a 	bl	8001734 <_malloc_usable_size_r>
 8001700:	4285      	cmp	r5, r0
 8001702:	4606      	mov	r6, r0
 8001704:	d802      	bhi.n	800170c <_realloc_r+0x34>
 8001706:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800170a:	d8f4      	bhi.n	80016f6 <_realloc_r+0x1e>
 800170c:	4629      	mov	r1, r5
 800170e:	4640      	mov	r0, r8
 8001710:	f7ff fc38 	bl	8000f84 <_malloc_r>
 8001714:	4607      	mov	r7, r0
 8001716:	2800      	cmp	r0, #0
 8001718:	d0ec      	beq.n	80016f4 <_realloc_r+0x1c>
 800171a:	42b5      	cmp	r5, r6
 800171c:	462a      	mov	r2, r5
 800171e:	4621      	mov	r1, r4
 8001720:	bf28      	it	cs
 8001722:	4632      	movcs	r2, r6
 8001724:	f7ff ffca 	bl	80016bc <memcpy>
 8001728:	4621      	mov	r1, r4
 800172a:	4640      	mov	r0, r8
 800172c:	f7ff fbbe 	bl	8000eac <_free_r>
 8001730:	463c      	mov	r4, r7
 8001732:	e7e0      	b.n	80016f6 <_realloc_r+0x1e>

08001734 <_malloc_usable_size_r>:
 8001734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001738:	1f18      	subs	r0, r3, #4
 800173a:	2b00      	cmp	r3, #0
 800173c:	bfbc      	itt	lt
 800173e:	580b      	ldrlt	r3, [r1, r0]
 8001740:	18c0      	addlt	r0, r0, r3
 8001742:	4770      	bx	lr

08001744 <_init>:
 8001744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001746:	bf00      	nop
 8001748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800174a:	bc08      	pop	{r3}
 800174c:	469e      	mov	lr, r3
 800174e:	4770      	bx	lr

08001750 <_fini>:
 8001750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001752:	bf00      	nop
 8001754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001756:	bc08      	pop	{r3}
 8001758:	469e      	mov	lr, r3
 800175a:	4770      	bx	lr
